FROM golang:alpine as backend-builder
ARG SENDGRID_API_KEY
ENV SENDGRID_API_KEY=${SENDGRID_API_KEY}
ARG SLACK_CLIENT_ID
ENV SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
ARG SLACK_CLIENT_SECRET
ENV SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
ARG TURBO_TOKEN
ENV TURBO_TOKEN=${TURBO_TOKEN}

RUN apk update && apk add git build-base
RUN mkdir /build-backend
WORKDIR /build-backend
COPY ./backend .
RUN go mod download
RUN GOOS=linux GOARCH=amd64 go build \
  -ldflags="-w -s -X main.SENDGRID_API_KEY=$SENDGRID_API_KEY -X github.com/highlight-run/highlight/backend/private-graph/graph.SLACK_CLIENT_ID=$SLACK_CLIENT_ID -X github.com/highlight-run/highlight/backend/private-graph/graph.SLACK_CLIENT_SECRET=$SLACK_CLIENT_SECRET" \
  -o /bin/backend

FROM node:16-alpine as frontend-builder
ARG REACT_APP_COMMIT_SHA
ENV REACT_APP_COMMIT_SHA=${REACT_APP_COMMIT_SHA}
ARG TURBO_TEAM
ENV TURBO_TEAM=${TURBO_TEAM}
ENV REACT_APP_ONPREM=true
RUN mkdir /build-frontend
WORKDIR /build-frontend
COPY ./ ./
RUN apk add --no-cache \
  chromium \
  nss \
  freetype \
  harfbuzz \
  ca-certificates \
  ttf-freefont  \
  python3 \
  make \
  g++  \
  && rm -rf /var/cache/apk/*

# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
  PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
RUN yarn
RUN export NODE_OPTIONS="--max-old-space-size=7168" && \
  yarn build:frontend

FROM alpine
RUN apk update && apk add build-base
ENV ONPREM_STATIC_FRONTEND_PATH="./build"
ENV ENABLE_OBJECT_STORAGE=true
WORKDIR /root/
COPY --from=backend-builder /bin/backend /bin/backend
RUN mkdir ./build
COPY --from=frontend-builder /build-frontend/frontend/build ./build

CMD ["/bin/backend"]
