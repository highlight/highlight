// vite.config.ts
import { vanillaExtractPlugin } from 'file:///Users/chris/code/highlight/node_modules/@vanilla-extract/vite-plugin/dist/vanilla-extract-vite-plugin.cjs.js'
import react from 'file:///Users/chris/code/highlight/node_modules/@vitejs/plugin-react/dist/index.mjs'
import path2 from 'path'
import dts from 'file:///Users/chris/code/highlight/node_modules/vite-plugin-dts/dist/index.mjs'
import { defineConfig } from 'file:///Users/chris/code/highlight/node_modules/vitest/dist/config.js'

// entryPoints.mjs
import * as path from 'node:path'
import * as url from 'node:url'
var __vite_injected_original_import_meta_url =
	'file:///Users/chris/code/highlight/packages/ui/entryPoints.mjs'
var directory = url.fileURLToPath(
	new URL('.', __vite_injected_original_import_meta_url),
)
var entryPoints_default = {
	components: path.resolve(directory, 'src/components/index.ts'),
	css: path.resolve(directory, 'src/css.ts'),
	keyframes: path.resolve(directory, 'src/keyframes.ts'),
	sprinkles: path.resolve(directory, 'src/sprinkles.ts'),
	vars: path.resolve(directory, 'src/vars.ts'),
	theme: path.resolve(directory, 'src/theme.ts'),
	colors: path.resolve(directory, 'src/colors.ts'),
	borders: path.resolve(directory, 'src/borders.ts'),
}

// vite.config.ts
var __vite_injected_original_dirname = '/Users/chris/code/highlight/packages/ui'
var vite_config_default = defineConfig({
	build: {
		emptyOutDir: false,
		lib: {
			entry: entryPoints_default,
			name: '@highlight-run/ui',
		},
		minify: 'esbuild',
		sourcemap: true,
		rollupOptions: {
			treeshake: 'smallest',
			external: ['react'],
		},
	},
	resolve: {
		alias: {
			'@': path2.resolve(__vite_injected_original_dirname, './src'),
		},
	},
	test: {
		environment: 'happy-dom',
		globals: true,
		setupFiles: ['./src/setupTests.ts'],
	},
	plugins: [dts(), react(), vanillaExtractPlugin()],
})
export { vite_config_default as default }
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAiZW50cnlQb2ludHMubWpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2NocmlzL2NvZGUvaGlnaGxpZ2h0L3BhY2thZ2VzL3VpXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvY2hyaXMvY29kZS9oaWdobGlnaHQvcGFja2FnZXMvdWkvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2NocmlzL2NvZGUvaGlnaGxpZ2h0L3BhY2thZ2VzL3VpL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgdmFuaWxsYUV4dHJhY3RQbHVnaW4gfSBmcm9tICdAdmFuaWxsYS1leHRyYWN0L3ZpdGUtcGx1Z2luJ1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0J1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBkdHMgZnJvbSAndml0ZS1wbHVnaW4tZHRzJ1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZXN0L2NvbmZpZydcblxuaW1wb3J0IGVudHJ5UG9pbnRzIGZyb20gJy4vZW50cnlQb2ludHMubWpzJ1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuXHRidWlsZDoge1xuXHRcdGVtcHR5T3V0RGlyOiBmYWxzZSxcblx0XHRsaWI6IHtcblx0XHRcdGVudHJ5OiBlbnRyeVBvaW50cyxcblx0XHRcdG5hbWU6ICdAaGlnaGxpZ2h0LXJ1bi91aScsXG5cdFx0fSxcblx0XHRtaW5pZnk6ICdlc2J1aWxkJyxcblx0XHRzb3VyY2VtYXA6IHRydWUsXG5cdFx0cm9sbHVwT3B0aW9uczoge1xuXHRcdFx0dHJlZXNoYWtlOiAnc21hbGxlc3QnLFxuXHRcdFx0ZXh0ZXJuYWw6IFsncmVhY3QnXSxcblx0XHR9LFxuXHR9LFxuXHRyZXNvbHZlOiB7XG5cdFx0YWxpYXM6IHtcblx0XHRcdCdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vc3JjJyksXG5cdFx0fSxcblx0fSxcblx0dGVzdDoge1xuXHRcdGVudmlyb25tZW50OiAnaGFwcHktZG9tJyxcblx0XHRnbG9iYWxzOiB0cnVlLFxuXHRcdHNldHVwRmlsZXM6IFsnLi9zcmMvc2V0dXBUZXN0cy50cyddLFxuXHR9LFxuXHRwbHVnaW5zOiBbZHRzKCksIHJlYWN0KCksIHZhbmlsbGFFeHRyYWN0UGx1Z2luKCldLFxufSlcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2NocmlzL2NvZGUvaGlnaGxpZ2h0L3BhY2thZ2VzL3VpXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvY2hyaXMvY29kZS9oaWdobGlnaHQvcGFja2FnZXMvdWkvZW50cnlQb2ludHMubWpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9jaHJpcy9jb2RlL2hpZ2hsaWdodC9wYWNrYWdlcy91aS9lbnRyeVBvaW50cy5tanNcIjsvLyBUaGlzIGlzIGluIGEgc2VwYXJhdGUgZmlsZSB0byBlbnN1cmUgd2UgaGF2ZSBhIHNpbmdsZSBzb3VyY2Ugb2YgdHJ1dGhcbi8vIGJldHdlZW4gdml0ZSBhbmQgcmVmbGFtZSBidWlsZCBzY3JpcHRzICh3aGljaCBjYW4ndCBpbXBvcnQgVFMgeWV0KVxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgKiBhcyB1cmwgZnJvbSAnbm9kZTp1cmwnXG5cbmNvbnN0IGRpcmVjdG9yeSA9IHVybC5maWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4nLCBpbXBvcnQubWV0YS51cmwpKVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cdGNvbXBvbmVudHM6IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMvY29tcG9uZW50cy9pbmRleC50cycpLFxuXHRjc3M6IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMvY3NzLnRzJyksXG5cdGtleWZyYW1lczogcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYy9rZXlmcmFtZXMudHMnKSxcblx0c3ByaW5rbGVzOiBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAnc3JjL3Nwcmlua2xlcy50cycpLFxuXHR2YXJzOiBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAnc3JjL3ZhcnMudHMnKSxcblx0dGhlbWU6IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMvdGhlbWUudHMnKSxcblx0Y29sb3JzOiBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAnc3JjL2NvbG9ycy50cycpLFxuXHRib3JkZXJzOiBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAnc3JjL2JvcmRlcnMudHMnKSxcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBdVMsU0FBUyw0QkFBNEI7QUFDNVUsT0FBTyxXQUFXO0FBQ2xCLE9BQU9BLFdBQVU7QUFDakIsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsb0JBQW9COzs7QUNGN0IsWUFBWSxVQUFVO0FBQ3RCLFlBQVksU0FBUztBQUhrSyxJQUFNLDJDQUEyQztBQUt4TyxJQUFNLFlBQWdCLGtCQUFjLElBQUksSUFBSSxLQUFLLHdDQUFlLENBQUM7QUFFakUsSUFBTyxzQkFBUTtBQUFBLEVBQ2QsWUFBaUIsYUFBUSxXQUFXLHlCQUF5QjtBQUFBLEVBQzdELEtBQVUsYUFBUSxXQUFXLFlBQVk7QUFBQSxFQUN6QyxXQUFnQixhQUFRLFdBQVcsa0JBQWtCO0FBQUEsRUFDckQsV0FBZ0IsYUFBUSxXQUFXLGtCQUFrQjtBQUFBLEVBQ3JELE1BQVcsYUFBUSxXQUFXLGFBQWE7QUFBQSxFQUMzQyxPQUFZLGFBQVEsV0FBVyxjQUFjO0FBQUEsRUFDN0MsUUFBYSxhQUFRLFdBQVcsZUFBZTtBQUFBLEVBQy9DLFNBQWMsYUFBUSxXQUFXLGdCQUFnQjtBQUNsRDs7O0FEaEJBLElBQU0sbUNBQW1DO0FBUXpDLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzNCLE9BQU87QUFBQSxJQUNOLGFBQWE7QUFBQSxJQUNiLEtBQUs7QUFBQSxNQUNKLE9BQU87QUFBQSxNQUNQLE1BQU07QUFBQSxJQUNQO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsSUFDWCxlQUFlO0FBQUEsTUFDZCxXQUFXO0FBQUEsTUFDWCxVQUFVLENBQUMsT0FBTztBQUFBLElBQ25CO0FBQUEsRUFDRDtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1IsT0FBTztBQUFBLE1BQ04sS0FBS0MsTUFBSyxRQUFRLGtDQUFXLE9BQU87QUFBQSxJQUNyQztBQUFBLEVBQ0Q7QUFBQSxFQUNBLE1BQU07QUFBQSxJQUNMLGFBQWE7QUFBQSxJQUNiLFNBQVM7QUFBQSxJQUNULFlBQVksQ0FBQyxxQkFBcUI7QUFBQSxFQUNuQztBQUFBLEVBQ0EsU0FBUyxDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcscUJBQXFCLENBQUM7QUFDakQsQ0FBQzsiLAogICJuYW1lcyI6IFsicGF0aCIsICJwYXRoIl0KfQo=
