name: Docker

on:
    push:
        branches: ['main']
    pull_request:
        types: ['opened', 'synchronize']
        paths:
            - '.github/workflows/docker.yml'
            - '.gitmodules'
            - 'yarn.lock'
            - 'cypress.config.js'
            - 'backend/**'
            - 'cypress/**'
            - 'frontend/**'
            - 'rrweb/**'
            - 'sdk/**'

jobs:
    build:
        name: Build Docker Images
        timeout-minutes: 30
        runs-on: docker-runner

        steps:
            - name: Use HTTPS for checkout
              run: echo -e '[url "https://github.com/"]\n  insteadOf = "git@github.com:"' >> ~/.gitconfig

            - name: Checkout
              uses: actions/checkout@v3
              with:
                  submodules: true

            - name: Install Doppler CLI
              uses: dopplerhq/cli-action@v2

            - name: Build & start docker containers
              env:
                  DOPPLER_TOKEN: ${{ secrets.DOPPLER_E2E_TOKEN }}
              run: |
                  cd docker;
                  export FIREBASE_SECRET=$(doppler secrets get --plain FIREBASE_SECRET);
                  export REACT_APP_FIREBASE_CONFIG_OBJECT=$(doppler secrets get --plain REACT_APP_FIREBASE_CONFIG_OBJECT);

                  docker compose up -d --build --remove-orphans;

                  docker compose exec -T postgres psql -h postgres -U postgres postgres < ../scripts/migrations/init.sql;

            - name: Run Cypress tests
              uses: cypress-io/github-action@v5
              with:
                  install: false
                  # frontend dependencies of ci:frontend are built prior by ci:build
                  start: doppler run -- yarn ci:frontend, doppler run -- yarn ci:backend
                  wait-on: 'https://localhost:3000, http://localhost:8080/dist/index.js, https://localhost:8082/health'
              env:
                  DOPPLER_TOKEN: ${{ secrets.DOPPLER_E2E_TOKEN }}
                  NODE_EXTRA_CA_CERTS: ./backend/localhostssl/server.crt
