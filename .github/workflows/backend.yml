name: Backend

on:
    push:
        branches: ['main']
    pull_request:
        types: [opened, synchronize]
    merge_group:

jobs:
    changes:
        runs-on: ubuntu-latest
        # Set job outputs to values from filter step
        outputs:
            private-graph: ${{ steps.filter.outputs.private-graph }}
            public-graph: ${{ steps.filter.outputs.public-graph }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      private-graph:
                        - 'backend/private-graph/graph/schema.graphqls'
                      public-graph:
                        - 'backend/public-graph/graph/schema.graphqls'

    code-setup:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'

    code-quality-check:
        needs: code-setup
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'
            - name: Format
              run: if [ "$(gofmt -l -d ./backend | wc -l)" -gt 0 ]; then gofmt -l -d ./backend && exit 1; fi
            - name: Check for GORM Debug
              run: if [ "$(grep --exclude-dir migrations -rE 'DB.[\s\n]*Debug\(\)' ./backend | wc -l)" -gt 0 ]; then grep --exclude-dir migrations -rE 'DB.[\s\n]*Debug\(\)' ./backend && exit 1; fi
            - name: Check for logrus without context
              run: if [ "$(grep --exclude-dir migrations --exclude main.go --exclude recovery.go --exclude logging.go -rE '\s+log\.(Debug|Info|Warn|Error|Fatal)' ./backend | grep -v 'WithContext' | grep -v 'Level' | wc -l)" -gt 0 ]; then grep --exclude-dir migrations --exclude main.go --exclude recovery.go --exclude logging.go -rE '\s+log\.(Debug|Info|Warn|Error|Fatal)' ./backend | grep -v 'WithContext' | grep -v 'Level' && exit 1; fi
            - name: Run linter
              uses: golangci/golangci-lint-action@v3
              with:
                  args: --config ./.golangci.yml --timeout 5m
                  working-directory: backend
                  version: latest

    make-check:
        needs: [changes, code-setup]
        if: needs.changes.outputs.private-graph == 'true' || needs.changes.outputs.public-graph == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'
            - name: copy backend
              run: |
                  mkdir tmp
                  cp -a backend/. tmp/
            - name: Make private graph
              if: ${{ needs.changes.outputs.private-graph == 'true' }}
              run: |
                  cd backend/
                  make private-gen
            - name: Make public graph
              if: ${{ needs.changes.outputs.public-graph == 'true' }}
              run: |
                  cd backend/
                  make public-gen
            - name: Diff Check
              run: |
                  diff -r backend/ tmp/

    build:
        needs: code-quality-check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'
            - name: Build binary
              run: cd backend/ && go build .

    test:
        needs: code-quality-check
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_USER: postgres
                    POSTGRES_DB: postgres
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
            clickhouse:
                image: clickhouse/clickhouse-server
                ports:
                    - 9000:9000
        env:
            CLICKHOUSE_ADDRESS: 'localhost:9000'
            CLICKHOUSE_DATABASE: 'default'
            CLICKHOUSE_TEST_DATABASE: 'test'
            CLICKHOUSE_USERNAME: 'default'
            CLICKHOUSE_PASSWORD: ''
            PSQL_HOST: 'localhost'
            PSQL_PORT: '5432'
            PSQL_USER: 'postgres'
            PSQL_DB: 'postgres'
            PSQL_PASSWORD: 'postgres'
            ENVIRONMENT: 'test'
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version-file: 'backend/go.mod'
            - name: Run tests
              run: cd backend && go test -p 1 ./... -v
