name: Deploy to AWS
on:
    workflow_dispatch:
    push:
        branches:
            - 'main'
        paths:
            - 'go.work'
            - 'go.work.sum'
            - 'backend/**'
            - 'deploy/**'
            - 'docker/backend.Dockerfile'
            - 'sdk/highlight-go/**'
            - '.github/workflows/deploy.yml'

concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
    deploy_opentelemetry_collector:
        runs-on: codebuild-highlight-github-actions-runner-${{ github.run_id }}-${{ github.run_attempt }}-arm-3.0-large
        steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-region: us-east-2
                  role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Check out the repo
              uses: actions/checkout@v4
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      otel-changed:
                        - '.github/workflows/deploy.yml'
                        - 'deploy/opentelemetry-collector.Dockerfile'
                        - 'deploy/otel-collector.yaml'

            # Edit and deploy opentelemetry collector
            - name: Build, tag, and push arm64 image to Amazon ECR
              if: steps.filter.outputs.otel-changed == 'true'
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: highlight-collector
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  cd deploy
                  docker buildx build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.arm64 -f opentelemetry-collector.Dockerfile .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.arm64
            - name: Replace image label for opentelemetry collector
              if: steps.filter.outputs.otel-changed == 'true'
              id: image-opentelemetry-collector
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: deploy/collector-task.json
                  container-name: highlight-collector
                  image: ${{ steps.login-ecr.outputs.registry }}/highlight-collector:${{ github.sha }}.arm64
            - name: Deploy to Amazon ECS opentelemetry collector service
              if: steps.filter.outputs.otel-changed == 'true'
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.image-opentelemetry-collector.outputs.task-definition }}
                  service: opentelemetry-collector-service
                  cluster: highlight-production-cluster
            - name: Replace image label for opentelemetry firehose collector
              if: steps.filter.outputs.otel-changed == 'true'
              id: image-opentelemetry-firehose-collector
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: deploy/collector-firehose-service.json
                  container-name: highlight-collector
                  image: ${{ steps.login-ecr.outputs.registry }}/highlight-collector:${{ github.sha }}.arm64
            - name: Deploy to Amazon ECS opentelemetry firehose collector service
              if: steps.filter.outputs.otel-changed == 'true'
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.image-opentelemetry-firehose-collector.outputs.task-definition }}
                  service: opentelemetry-collector-firehose-service
                  cluster: highlight-production-cluster
