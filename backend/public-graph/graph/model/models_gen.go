// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BackendErrorObjectInput struct {
	SessionSecureID string    `json:"session_secure_id"`
	RequestID       string    `json:"request_id"`
	Event           string    `json:"event"`
	Type            string    `json:"type"`
	URL             string    `json:"url"`
	Source          string    `json:"source"`
	StackTrace      string    `json:"stackTrace"`
	Timestamp       time.Time `json:"timestamp"`
	Payload         *string   `json:"payload"`
}

type DeviceMetricInput struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

type ErrorObjectInput struct {
	Event        string             `json:"event"`
	Type         string             `json:"type"`
	URL          string             `json:"url"`
	Source       string             `json:"source"`
	LineNumber   int                `json:"lineNumber"`
	ColumnNumber int                `json:"columnNumber"`
	StackTrace   []*StackFrameInput `json:"stackTrace"`
	Timestamp    time.Time          `json:"timestamp"`
	Payload      *string            `json:"payload"`
}

type MetricInput struct {
	SessionSecureID string     `json:"session_secure_id"`
	Name            string     `json:"name"`
	Value           float64    `json:"value"`
	Type            MetricType `json:"type"`
	URL             string     `json:"url"`
	Timestamp       time.Time  `json:"timestamp"`
	RequestID       *string    `json:"request_id"`
}

type ReplayEventInput struct {
	Type      int         `json:"type"`
	Timestamp float64     `json:"timestamp"`
	Sid       float64     `json:"_sid"`
	Data      interface{} `json:"data"`
}

type ReplayEventsInput struct {
	Events []*ReplayEventInput `json:"events"`
}

type StackFrameInput struct {
	FunctionName *string       `json:"functionName"`
	Args         []interface{} `json:"args"`
	FileName     *string       `json:"fileName"`
	LineNumber   *int          `json:"lineNumber"`
	ColumnNumber *int          `json:"columnNumber"`
	IsEval       *bool         `json:"isEval"`
	IsNative     *bool         `json:"isNative"`
	Source       *string       `json:"source"`
}

type WebVitalMetricInput struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

type MetricType string

const (
	MetricTypeWebVital MetricType = "WebVital"
	MetricTypeDevice   MetricType = "Device"
	MetricTypeBackend  MetricType = "Backend"
)

var AllMetricType = []MetricType{
	MetricTypeWebVital,
	MetricTypeDevice,
	MetricTypeBackend,
}

func (e MetricType) IsValid() bool {
	switch e {
	case MetricTypeWebVital, MetricTypeDevice, MetricTypeBackend:
		return true
	}
	return false
}

func (e MetricType) String() string {
	return string(e)
}

func (e *MetricType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricType", str)
	}
	return nil
}

func (e MetricType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
