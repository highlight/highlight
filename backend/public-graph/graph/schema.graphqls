# CLIENT GRAPH

scalar Any
scalar Timestamp
scalar Int64
scalar Int64ID

type Session {
	id: ID
	secure_id: String!
	organization_id: ID!
	project_id: ID!
}

input StackFrameInput {
	functionName: String
	args: [Any]
	fileName: String
	lineNumber: Int
	columnNumber: Int
	isEval: Boolean
	isNative: Boolean
	source: String
}

input ErrorObjectInput {
	event: String!
	type: String!
	url: String!
	source: String!
	lineNumber: Int!
	columnNumber: Int!
	stackTrace: [StackFrameInput]!
	timestamp: Timestamp!
	payload: String
}

input ServiceInput {
	name: String!
	version: String!
}

input BackendErrorObjectInput {
	session_secure_id: String
	request_id: String
	trace_id: String
	span_id: String
	log_cursor: String
	event: String!
	type: String!
	url: String!
	source: String!
	stackTrace: String!
	timestamp: Timestamp!
	payload: String
	service: ServiceInput!
	environment: String!
}

input MetricTag {
	name: String!
	value: String!
}

input MetricInput {
	session_secure_id: String!
	span_id: String
	parent_span_id: String
	trace_id: String
	group: String
	name: String!
	value: Float!
	category: String
	timestamp: Timestamp!
	tags: [MetricTag!]
}

input ReplayEventInput {
	type: Int!
	timestamp: Float!
	_sid: Float!
	data: Any!
}

input ReplayEventsInput {
	events: [ReplayEventInput]!
}

"""
A match configuration. Each field of this type represents a different type of match
configuration. One and only 1 field should be populated.

This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
this bug: https://github.com/99designs/gqlgen/issues/2741
"""
type MatchConfig {
	"""
	A match configuration which matches against a regular expression.
	Can only match string attributes.
	"""
	regexValue: String
	"""
	A match configuration which does an exact match against any value.
	"""
	matchValue: Any
}

"""
An attribute match configuration which can match an attribute key and value.
"""
type AttributeMatchConfig {
	key: MatchConfig!
	attribute: MatchConfig!
}

"""
An event matcher configuration which matches span events within a span.
"""
type SpanEventMatchConfig {
	name: MatchConfig
	attributes: [AttributeMatchConfig!]
}

"""
A match based span sampling configuration. A span matches if each specified matching configuration
matches.
If no matching configuration is specified, then all spans will match.
The sampling ratio will be applied to all matching spans.
"""
type SpanSamplingConfig {
	name: MatchConfig

	"""
	A list of attribute match configs.
	In order to match each attribute listed must match. This is an implicit AND operation.
	"""
	attributes: [AttributeMatchConfig!]

	"""
	A list of span event match configs.
	"""
	events: [SpanEventMatchConfig!]

	"""
	The ratio of spans to sample. Expressed in the form 1/n. So if the ratio is 10, then 1 out of
	every 10 spans will be sampled. Setting the ratio to 0 will disable sampling for the span.
	"""
	samplingRatio: Int!
}

"""
A match based log sampling configuration. A log matches if each specified matching configuration matches.
If no matching configuration is specified, then all spans will match.
The sampling ratio will be applied to all matching spans.
"""
type LogSamplingConfig {
	"""
	A list of attribute match configs.
	In order to match each attribute listed must match. This is an implicit AND operation.
	"""
	attributes: [AttributeMatchConfig!]

	"""
	Matches against the log message.
	"""
	message: MatchConfig

	"""
	Matches against the severity of the log.
	"""
	severityText: MatchConfig

	"""
	The ratio of logs to sample. Expressed in the form 1/n. So if the ratio is 10, then 1 out of
	every 10 logs will be sampled. Setting the ratio to 0 will disable sampling for the log.
	"""
	samplingRatio: Int!
}

type SamplingConfig {
	spans: [SpanSamplingConfig!]
	logs: [LogSamplingConfig!]
}

type InitializeSessionResponse {
	secure_id: String!
	project_id: ID!
	sampling: SamplingConfig
}

type Mutation {
	initializeSession(
		session_secure_id: String!
		session_key: String
		organization_verbose_id: String!
		enable_strict_privacy: Boolean!
		enable_recording_network_contents: Boolean!
		clientVersion: String!
		firstloadVersion: String!
		clientConfig: String!
		environment: String!
		appVersion: String
		serviceName: String
		fingerprint: String!
		client_id: String!
		network_recording_domains: [String!]
		disable_session_recording: Boolean
		privacy_setting: String
	): InitializeSessionResponse!
	identifySession(
		session_secure_id: String!
		user_identifier: String!
		user_object: Any
	): String!
	addSessionProperties(
		session_secure_id: String!
		properties_object: Any
	): String!
	# deprecated for new sdks - use pushSessionEvents instead
	pushPayload(
		session_secure_id: String!
		payload_id: ID # Optional for backwards compatibility with older clients
		events: ReplayEventsInput!
		messages: String!
		resources: String!
		web_socket_events: String
		errors: [ErrorObjectInput]!
		is_beacon: Boolean
		has_session_unloaded: Boolean
		highlight_logs: String
	): Int!
	# deprecated for new sdks - use pushSessionEvents instead
	pushPayloadCompressed(
		session_secure_id: String!
		payload_id: ID!
		data: String!
	): Any
	pushSessionEvents(
		session_secure_id: String!
		payload_id: Int64ID!
		data: String!
	): Any
	pushBackendPayload(
		project_id: String
		errors: [BackendErrorObjectInput]!
	): Any
	pushMetrics(metrics: [MetricInput]!): Int!
	markBackendSetup(
		project_id: String
		session_secure_id: String
		type: String
	): Any
	addSessionFeedback(
		session_secure_id: String!
		user_name: String
		user_email: String
		verbatim: String!
		timestamp: Timestamp!
	): String!
}

type Query {
	ignore(id: ID!): Any
	sampling(organization_verbose_id: String!): SamplingConfig!
}

enum PublicGraphError {
	BillingQuotaExceeded
}
