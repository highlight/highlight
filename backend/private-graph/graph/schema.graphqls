# MAIN GRAPH

scalar Any
scalar Timestamp
scalar Int64
scalar UInt64
scalar StringArray
scalar Map

type Field {
	id: Int64!
	name: String!
	value: String!
	type: String
}

enum SessionExcludedReason {
	Initializing
	NoActivity
	NoUserInteractionEvents
	NoTimelineIndicatorEvents
	NoError
	NoUserEvents
	IgnoredUser
	BillingQuotaExceeded
	RetentionPeriodExceeded
	Sampled
	RateLimitMinute
	ExclusionFilter
}

type Session {
	id: ID!
	secure_id: String!
	client_id: String!
	fingerprint: Int
	os_name: String!
	os_version: String!
	browser_name: String!
	browser_version: String!
	ip: String!
	city: String!
	state: String!
	country: String!
	postal: String!
	environment: String
	app_version: String
	client_version: String
	firstload_version: String
	client_config: String
	language: String!
	identifier: String!
	identified: Boolean!
	created_at: Timestamp!
	payload_updated_at: Timestamp
	length: Int
	active_length: Int
	user_object: Any
	user_properties: String
	fields: [Field]
	viewed: Boolean
	starred: Boolean
	processed: Boolean
	excluded: Boolean!
	excluded_reason: SessionExcludedReason
	has_rage_clicks: Boolean
	has_errors: Boolean
	first_time: Boolean
	field_group: String
	enable_strict_privacy: Boolean
	privacy_setting: String
	enable_recording_network_contents: Boolean
	object_storage_enabled: Boolean
	payload_size: Int64
	within_billing_quota: Boolean
	is_public: Boolean!
	event_counts: String
	direct_download_url: String
	resources_url: String
	web_socket_events_url: String
	timeline_indicators_url: String
	deviceMemory: Int
	last_user_interaction_time: Timestamp!
	chunked: Boolean
	session_feedback: [SessionComment!]
	email: String
}

type SessionInterval {
	session_secure_id: String!
	start_time: Timestamp!
	end_time: Timestamp!
	duration: Int!
	active: Boolean!
}

type SessionsReportRow {
	key: String!
	email: String!
	num_sessions: UInt64!
	first_session: Timestamp!
	last_session: Timestamp!
	num_days_visited: UInt64!
	num_months_visited: UInt64!
	avg_active_length_mins: Float!
	max_active_length_mins: Float!
	total_active_length_mins: Float!
	avg_length_mins: Float!
	max_length_mins: Float!
	total_length_mins: Float!
	location: String!
}

type TimelineIndicatorEvent {
	session_secure_id: String!
	timestamp: Float!
	sid: Float!
	data: Any
	type: Int!
}

type WebSocketEvent {
	message: String!
	name: String!
	socketId: String!
	type: String!
	timeStamp: Float!
	size: Int!
}

type RageClickEvent {
	id: ID!
	project_id: ID!
	session_secure_id: String!
	start_timestamp: Timestamp!
	end_timestamp: Timestamp!
	total_clicks: Int!
}

type RageClickEventForProject {
	identifier: String!
	session_secure_id: String!
	total_clicks: Int!
	user_properties: String!
}

type BillingDetails {
	plan: Plan!
	meter: Int64!
	membersMeter: Int64!
	errorsMeter: Int64!
	logsMeter: Int64!
	tracesMeter: Int64!
	sessionsDailyAverage: Float!
	errorsDailyAverage: Float!
	logsDailyAverage: Float!
	tracesDailyAverage: Float!
	sessionsBillingLimit: Int64
	errorsBillingLimit: Int64
	logsBillingLimit: Int64
	tracesBillingLimit: Int64
}

type UsageHistory {
	usage: MetricsBuckets!
}

type Invoice {
	amountDue: Int64
	amountPaid: Int64
	attemptCount: Int64
	date: Timestamp
	url: String
	status: String
}

type SubscriptionDiscount {
	name: String!
	percent: Float!
	amount: Int64!
	until: Timestamp
}

type SubscriptionDetails {
	baseAmount: Int64!
	discount: SubscriptionDiscount
	lastInvoice: Invoice
	billingIssue: Boolean!
	billingIngestBlocked: Boolean!
}

type Plan {
	type: PlanType!
	interval: SubscriptionInterval!
	membersLimit: Int64
	enableBillingLimits: Boolean!

	aws_mp_subscription: AWSMarketplaceSubscription

	sessionsLimit: Int64!
	errorsLimit: Int64!
	logsLimit: Int64!
	tracesLimit: Int64!

	sessionsRate: Float!
	errorsRate: Float!
	logsRate: Float!
	tracesRate: Float!
}

type AWSMarketplaceSubscription {
	customer_identifier: String!
	customer_aws_account_id: String!
	product_code: String!
}

enum PlanType {
	Free
	Lite
	Basic
	Startup
	Enterprise
	UsageBased
	Graduated
	Business
}

enum ProductType {
	Sessions
	Errors
	Logs
	Traces
	Metrics
	Events
}

enum SuggestionType {
	None
	Value
	Key
}

enum IngestReason {
	Sample
	Rate
	Filter
}

enum SubscriptionInterval {
	Monthly
	Annual
}

enum RetentionPeriod {
	SevenDays
	ThirtyDays
	ThreeMonths
	SixMonths
	TwelveMonths
	TwoYears
	ThreeYears
}

enum OpenSearchCalendarInterval {
	minute
	hour
	day
	week
	month
	quarter
	year
}

type EnhancedUserDetailsResult {
	id: ID
	name: String
	avatar: String
	bio: String
	socials: [SocialLink]
	email: String
}

type LinearTeam {
	team_id: String!
	name: String!
	key: String!
}

type JiraTeam {
	team_id: String!
	name: String!
	key: String!
}

type JiraProjectIdentifier {
	id: String!
}

type JiraIssueTypeScope {
	type: String!
	project: JiraProjectIdentifier
}

type AccessibleJiraResources {
	id: String!
	url: String!
	name: String!
	scopes: [String!]
	avatarUrl: String!
}

type JiraIssueType {
	self: String!
	id: String!
	description: String!
	iconUrl: String!
	name: String!
	untranslatedName: String!
	subtask: Boolean!
	scope: JiraIssueTypeScope
}

type GitlabProject {
	id: Int!
	name: String!
	nameWithNameSpace: String!
}

type JiraProject {
	name: String!
	key: String!
	id: String!
	self: String!
	issueTypes: [JiraIssueType]
}

type GitHubRepo {
	repo_id: String!
	name: String!
	key: String!
}

type VercelEnv {
	id: String!
	key: String!
	configurationId: String!
}

type VercelProject {
	id: String!
	name: String!
	env: [VercelEnv!]!
}

type ClickUpSpace {
	id: String!
	name: String!
}

type ClickUpTeam {
	id: String!
	name: String!
	spaces: [ClickUpSpace!]!
}

type HeightWorkspace {
	id: String!
	model: String!
	name: String!
	url: String!
}

type ClickUpFolder {
	id: String!
	name: String!
	lists: [ClickUpList!]!
}

type HeightList {
	id: String!
	name: String!
	type: String!
}
type ClickUpList {
	id: String!
	name: String!
}

type ClickUpTask {
	id: String!
	name: String!
}

type HeightTask {
	id: String!
	name: String!
}

type Sampling {
	session_sampling_rate: Float!
	error_sampling_rate: Float!
	log_sampling_rate: Float!
	trace_sampling_rate: Float!
	session_minute_rate_limit: Int64
	error_minute_rate_limit: Int64
	log_minute_rate_limit: Int64
	trace_minute_rate_limit: Int64
	session_exclusion_query: String
	error_exclusion_query: String
	log_exclusion_query: String
	trace_exclusion_query: String
}

input SamplingInput {
	session_sampling_rate: Float
	error_sampling_rate: Float
	log_sampling_rate: Float
	trace_sampling_rate: Float
	session_minute_rate_limit: Int64
	error_minute_rate_limit: Int64
	log_minute_rate_limit: Int64
	trace_minute_rate_limit: Int64
	session_exclusion_query: String
	error_exclusion_query: String
	log_exclusion_query: String
	trace_exclusion_query: String
}

type SocialLink {
	type: SocialType!
	link: String
}

enum SocialType {
	Github
	LinkedIn
	Twitter
	Facebook
	Site
}

enum IntegrationType {
	Slack
	Linear
	Zapier
	Front
	Vercel
	Discord
	ClickUp
	Height
	GitHub
	Jira
	MicrosoftTeams
	GitLab
	Heroku
	Cloudflare
}

enum ErrorState {
	OPEN
	RESOLVED
	IGNORED
}

enum SourceMappingErrorCode {
	File_Name_Missing_From_Source_Path
	Error_Parsing_Stack_Trace_File_Url
	Error_Constructing_Source_Map_URL
	Missing_Source_Map_File_In_S3
	Minified_File_Missing_In_S3_And_URL
	Sourcemap_File_Missing_In_S3_And_URL
	Minified_File_Larger
	Source_Map_File_Larger
	Invalid_SourceMapURL
	Sourcemap_Library_Couldnt_Parse
	Sourcemap_Library_Couldnt_Retrieve_Source
}

enum AdminRole {
	ADMIN
	MEMBER
}

enum SessionCommentType {
	Admin
	FEEDBACK
}

enum SessionAlertType {
	ERROR_ALERT
	NEW_USER_ALERT
	TRACK_PROPERTIES_ALERT
	USER_PROPERTIES_ALERT
	RAGE_CLICK_ALERT
	NEW_SESSION_ALERT
}

enum LogLevel {
	trace
	debug
	info
	warn
	error
	fatal
	panic
}

enum SortDirection {
	ASC
	DESC
}

enum SavedSegmentEntityType {
	Log
	Trace
	Error
	Session
}

type Project {
	id: ID!
	verbose_id: String!
	name: String!
	billing_email: String
	secret: String
	workspace_id: ID!
	workspace: Workspace
	excluded_users: StringArray
	error_filters: StringArray
	error_json_paths: StringArray
	rage_click_window_seconds: Int
	rage_click_radius_pixels: Int
	rage_click_count: Int
	filter_chrome_extension: Boolean
}

type AllProjectSettings {
	id: ID!
	verbose_id: String!
	name: String!
	billing_email: String
	workspace_id: ID!
	excluded_users: StringArray
	error_filters: StringArray
	error_json_paths: StringArray
	rage_click_window_seconds: Int
	rage_click_radius_pixels: Int
	rage_click_count: Int
	filter_chrome_extension: Boolean
	filterSessionsWithoutError: Boolean!
	autoResolveStaleErrorsDayInterval: Int!
	sampling: Sampling!
}

type AllWorkspaceSettings {
	workspace_id: ID!
	ai_application: Boolean!
	ai_query_builder: Boolean!
	ai_insights: Boolean!
	enable_billing_limits: Boolean!
	enable_business_dashboards: Boolean!
	enable_business_projects: Boolean!
	enable_business_retention: Boolean!
	enable_business_seats: Boolean!
	enable_data_deletion: Boolean!
	enable_grafana_dashboard: Boolean!
	enable_ingest_filtering: Boolean!
	enable_ingest_sampling: Boolean!
	enable_network_traces: Boolean!
	enable_project_level_access: Boolean!
	enable_session_export: Boolean!
	enable_unlisted_sharing: Boolean!
}

type Account {
	id: ID!
	name: String!
	session_count_cur: Int!
	view_count_cur: Int!
	session_count_prev: Int!
	view_count_prev: Int!
	session_count_prev_prev: Int!
	session_limit: Int!
	paid_prev: Int!
	paid_prev_prev: Int!
	email: String!
	subscription_start: Timestamp
	plan_tier: String!
	unlimited_members: Boolean!
	stripe_customer_id: String!
	member_count: Int!
	member_limit: Int
}

type AccountDetailsMember {
	id: ID!
	name: String!
	email: String!
	last_active: Timestamp
}

type AccountDetails {
	id: ID!
	name: String!
	session_count_per_month: [NamedCount]
	session_count_per_day: [NamedCount]
	stripe_customer_id: String!
	members: [AccountDetailsMember!]!
}

type NamedCount {
	name: String!
	count: Int!
}

type Workspace {
	id: ID!
	name: String!
	slack_webhook_channel: String
	slack_channels: String
	projects: [Project]!
	plan_tier: String!
	unlimited_members: Boolean!
	trial_end_date: Timestamp
	billing_period_end: Timestamp
	next_invoice_date: Timestamp
	allow_meter_overage: Boolean!
	allowed_auto_join_email_origins: String
	eligible_for_trial_extension: Boolean!
	trial_extension_enabled: Boolean!
	clearbit_enabled: Boolean!
	retention_period: RetentionPeriod!
	errors_retention_period: RetentionPeriod!
	sessions_max_cents: Int
	errors_max_cents: Int
	logs_max_cents: Int
	traces_max_cents: Int
	cloudflare_proxy: String
}

type SearchParams {
	query: String
}

type SavedSegment {
	id: ID!
	name: String!
	entity_type: SavedSegmentEntityType!
	params: SearchParams!
	project_id: ID!
}

type ErrorObject {
	id: ID!
	created_at: Timestamp!
	project_id: Int!
	session_id: Int
	trace_id: String
	span_id: String
	log_cursor: String
	error_group_id: Int!
	error_group_secure_id: String!
	event: [String]!
	type: String!
	url: String!
	source: String
	lineNumber: Int
	columnNumber: Int
	stack_trace: String!
	structured_stack_trace: [ErrorTrace]!
	timestamp: Timestamp!
	payload: String
	request_id: String
	os: String
	browser: String
	environment: String
	session: Session
	serviceVersion: String
	serviceName: String
}

type ErrorInstance {
	error_object: ErrorObject!
	next_id: ID
	previous_id: ID
}

type ErrorField {
	project_id: Int
	name: String!
	value: String!
}

type ErrorGroup {
	created_at: Timestamp!
	updated_at: Timestamp!
	id: ID!
	secure_id: String!
	project_id: Int!
	type: String!
	event: [String]!
	structured_stack_trace: [ErrorTrace]!
	metadata_log: [ErrorMetadata]!
	mapped_stack_trace: String
	stack_trace: String
	fields: [ErrorField]
	state: ErrorState!
	snoozed_until: Timestamp
	environments: String
	error_frequency: [Int64!]!
	error_metrics: [ErrorDistributionItem!]!
	is_public: Boolean!
	first_occurrence: Timestamp
	last_occurrence: Timestamp
	viewed: Boolean
	serviceName: String
	error_tag: ErrorTag
}

type ErrorMetadata {
	error_id: Int!
	session_id: Int!
	session_secure_id: String!
	environment: String
	timestamp: Timestamp
	os: String
	browser: String
	visited_url: String
	fingerprint: String!
	identifier: String
	user_properties: String
	request_id: String
	payload: String
}

type ErrorTag {
	id: ID!
	created_at: Timestamp!
	title: String
	description: String
}

type MatchedErrorTag {
	id: ID!
	title: String!
	description: String!
	score: Float!
}

type MatchedErrorObject {
	id: ID!
	event: [String]!
	type: String!
	stack_trace: String!
	score: Float!
}

enum EnhancementSource {
	github
	sourcemap
}

type ErrorTrace {
	fileName: String
	lineNumber: Int
	functionName: String
	columnNumber: Int
	error: String
	sourceMappingErrorMetadata: SourceMappingError
	lineContent: String
	linesBefore: String
	linesAfter: String
	externalLink: String
	enhancementSource: EnhancementSource
	enhancementVersion: String
}

type SourceMappingError {
	errorCode: SourceMappingErrorCode
	stackTraceFileURL: String
	sourcemapFetchStrategy: String
	sourceMapURL: String
	minifiedFetchStrategy: String
	actualMinifiedFetchedPath: String
	minifiedLineNumber: Int
	minifiedColumnNumber: Int
	actualSourcemapFetchedPath: String
	sourcemapFileSize: Int
	minifiedFileSize: Int
	mappedLineNumber: Int
	mappedColumnNumber: Int
}

type S3File {
	key: String
}

interface Edge {
	cursor: String!
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String!
	endCursor: String!
}

interface Connection {
	pageInfo: PageInfo!
}

type Log {
	projectID: Int!
	timestamp: Timestamp!
	level: LogLevel!
	message: String!
	logAttributes: Map!
	traceID: String
	spanID: String
	secureSessionID: String
	source: String
	serviceName: String
	serviceVersion: String
	environment: String
}

type LogEdge implements Edge {
	cursor: String!
	node: Log!
}

type LogConnection implements Connection {
	edges: [LogEdge!]!
	pageInfo: PageInfo!
}

type Trace {
	timestamp: Timestamp!
	traceID: String!
	spanID: String!
	parentSpanID: String!
	projectID: Int!
	secureSessionID: String!
	traceState: String!
	spanName: String!
	spanKind: String!
	duration: Int!
	startTime: Int!
	serviceName: String!
	serviceVersion: String!
	environment: String!
	hasErrors: Boolean!
	traceAttributes: Map!
	statusCode: String!
	statusMessage: String!
	events: [TraceEvent]
	links: [TraceLink]
}

type TracePayload {
	trace: [Trace!]!
	errors: [TraceError!]!
}

type TraceError {
	created_at: Timestamp!
	id: ID!
	trace_id: String
	span_id: String
	log_cursor: String
	event: String!
	type: String!
	source: String!
	error_group_secure_id: String!
	timestamp: Timestamp!
}

type TraceEvent {
	timestamp: Timestamp!
	name: String!
	attributes: Map!
}

type TraceLink {
	traceID: String!
	spanID: String!
	traceState: String!
	attributes: Map!
}

type TraceEdge implements Edge {
	cursor: String!
	node: Trace!
}

type TraceConnection implements Connection {
	edges: [TraceEdge!]!
	pageInfo: PageInfo!
	sampled: Boolean!
}

type ErrorObjectNodeSession {
	secureID: String!
	email: String
	fingerprint: Int
	excluded: Boolean!
}

type ErrorObjectNode {
	id: ID!
	createdAt: Timestamp!
	event: String!
	timestamp: Timestamp!
	session: ErrorObjectNodeSession
	serviceVersion: String!
	serviceName: String!
	errorGroupSecureID: String!
}

enum ServiceStatus {
	healthy
	error
	created
}

type Service {
	id: ID!
	projectID: ID!
	name: String!
	status: ServiceStatus!
	githubRepoPath: String
	buildPrefix: String
	githubPrefix: String
	errorDetails: [String!]
}

type ServiceNode {
	id: ID!
	projectID: ID!
	name: String!
	status: ServiceStatus!
	githubRepoPath: String
	buildPrefix: String
	githubPrefix: String
	errorDetails: [String!]
}

type ServiceEdge implements Edge {
	cursor: String!
	node: ServiceNode!
}

type ServiceConnection implements Connection {
	edges: [ServiceEdge]!
	pageInfo: PageInfo!
}

enum ReservedLogKey {
	"""
	Keep this in alpha order
	"""
	environment
	level
	message
	secure_session_id
	span_id
	trace_id
	source
	service_name
	service_version
	timestamp
}

enum ReservedTraceKey {
	environment
	has_errors
	level
	message
	metric_name
	metric_value
	secure_session_id
	span_id
	trace_id
	parent_span_id
	trace_state
	span_name
	span_kind
	duration
	service_name
	service_version
	timestamp
	highlight_type
}

enum ReservedErrorObjectKey {
	browser
	client_id
	environment
	has_session
	os_name
	secure_session_id
	service_name
	service_version
	timestamp
	trace_id
	visited_url
}

enum ReservedErrorGroupKey {
	event
	secure_id
	status
	tag
	type
}

enum ReservedErrorsJoinedKey {
	"""
	ReservedErrorObjectKey
	"""
	id
	browser
	client_id
	environment
	has_session
	os_name
	secure_session_id
	service_name
	service_version
	timestamp
	trace_id
	visited_url
	"""
	ReservedErrorGroupKey
	"""
	event
	secure_id
	status
	tag
	type
}

enum ReservedSessionKey {
	active_length
	browser_name
	browser_version
	city
	completed
	country
	environment
	excluded
	first_time
	has_comments
	has_errors
	has_rage_clicks
	identified
	identifier
	ip
	length
	normalness
	os_name
	os_version
	pages_visited
	sample
	secure_id
	service_version
	state
	viewed_by_anyone
	viewed_by_me
	within_billing_quota

	# deprecated but kept in for backwards compatibility of search
	loc_state
	processed
	viewed
}

enum ReservedEventKey {
	browser_name
	browser_version
	city
	country
	environment
	event
	first_session
	identified
	identifier
	ip
	os_name
	os_version
	secure_session_id
	service_version
	session_active_length
	session_length
	session_pages_visited
	state
}

enum LogSource {
	frontend
	backend
}

enum KeyType {
	Boolean
	Creatable
	Numeric
	String
}

type LogsHistogramBucketCount {
	count: UInt64!
	level: LogLevel!
}

type LogsHistogramBucket {
	bucketId: UInt64!
	counts: [LogsHistogramBucketCount!]!
}

type LogsHistogram {
	buckets: [LogsHistogramBucket!]!
	totalCount: UInt64!
	objectCount: UInt64!
	sampleFactor: Float!
}

enum MetricAggregator {
	Count
	CountDistinct
	CountDistinctKey
	Min
	Avg
	P50
	P90
	P95
	P99
	Max
	Sum
	None
}

enum MetricColumn {
	Duration
}

enum MetricBucketBy {
	None
	Timestamp
	Histogram
}

type MetricBucket {
	bucket_id: UInt64!
	bucket_min: Float!
	bucket_max: Float!
	group: [String!]!
	column: MetricColumn!
	metric_type: MetricAggregator!
	metric_value: Float
}

type MetricsBuckets {
	buckets: [MetricBucket!]!
	bucket_count: UInt64!
	sample_factor: Float!
}

type LogLine {
	timestamp: Timestamp!
	body: String!
	severity: LogLevel
	labels: String!
}

type QueryKey {
	name: String!
	type: KeyType!
}

type ReferrerTablePayload {
	host: String!
	count: Int!
	percent: Float!
}

type TopUsersPayload {
	id: ID!
	identifier: String!
	total_active_time: Int!
	active_time_percentage: Float!
	user_properties: String!
}

type NewUsersCount {
	count: Int64!
}

type AverageSessionLength {
	length: Float!
}

type UserFingerprintCount {
	count: Int64!
}

input DashboardParamsInput {
	date_range: DateRangeRequiredInput!
	resolution_minutes: Int
	timezone: String
	units: String
	aggregator: MetricAggregator!
	filters: [MetricTagFilterInput!]
	groups: [String!]
}

input ErrorGroupFrequenciesParamsInput {
	date_range: DateRangeRequiredInput!
	resolution_minutes: Int!
}

input SortInput {
	column: String!
	direction: SortDirection!
}

type SortOutput {
	column: String!
	direction: SortDirection!
}

input QueryInput {
	query: String!
	date_range: DateRangeRequiredInput!
	sort: SortInput
}

type QueryOutput {
	query: String!
	date_range: DateRangeRequiredOutput!
}

enum MetricTagFilterOp {
	equals
	contains
}

type MetricTagFilter {
	tag: String!
	op: MetricTagFilterOp!
	value: String!
}

input MetricTagFilterInput {
	tag: String!
	op: MetricTagFilterOp!
	value: String!
}

input DateHistogramBucketSize {
	calendar_interval: OpenSearchCalendarInterval!
	multiple: Int!
}

input DateHistogramOptions {
	bucket_size: DateHistogramBucketSize!
	time_zone: String!
	bounds: DateRangeInput!
}

# Deprecated: switch to using QueryInput format for searches
input ClickhouseQuery {
	isAnd: Boolean!
	rules: [[String!]!]!
	dateRange: DateRangeRequiredInput!
}

enum NetworkRequestAttribute {
	method
	initiator_type
	url
	body_size
	response_size
	status
	latency
	connect_latency
	dns_latency
	redirect_latency
	request_id
	graphql_operation
}

input NetworkHistogramParamsInput {
	lookback_days: Float!
	attribute: NetworkRequestAttribute
}

input AdminAboutYouDetails {
	first_name: String!
	last_name: String!
	user_defined_role: String!
	user_defined_persona: String!
	user_defined_team_size: String!
	heard_about: String!
	phone_home_contact_allowed: Boolean!
	referral: String!
	phone: String
}

input AdminAndWorkspaceDetails {
	# Admin
	first_name: String!
	last_name: String!
	user_defined_role: String!
	user_defined_team_size: String!
	heard_about: String!
	phone_home_contact_allowed: Boolean!
	referral: String!

	# Workspace
	workspace_name: String!
	allowed_auto_join_email_origins: String
	promo_code: String
}

input SessionAlertInput {
	project_id: ID!
	name: String!
	count_threshold: Int!
	threshold_window: Int!
	slack_channels: [SanitizedSlackChannelInput!]!
	discord_channels: [DiscordChannelInput!]!
	microsoft_teams_channels: [MicrosoftTeamsChannelInput!]!
	webhook_destinations: [WebhookDestinationInput!]!
	emails: [String!]!
	environments: [String!]!
	disabled: Boolean!
	default: Boolean
	type: SessionAlertType!
	user_properties: [UserPropertyInput!]!
	exclude_rules: [String!]!
	track_properties: [TrackPropertyInput!]!
}

input LogAlertInput {
	project_id: ID!
	name: String!
	count_threshold: Int!
	below_threshold: Boolean!
	threshold_window: Int!
	slack_channels: [SanitizedSlackChannelInput!]!
	discord_channels: [DiscordChannelInput!]!
	microsoft_teams_channels: [MicrosoftTeamsChannelInput!]!
	webhook_destinations: [WebhookDestinationInput!]!
	emails: [String!]!
	disabled: Boolean!
	default: Boolean
	query: String!
}

type DateRange {
	start_date: Timestamp
	end_date: Timestamp
}

input DateRangeInput {
	start_date: Timestamp
	end_date: Timestamp
}

input DateRangeRequiredInput {
	start_date: Timestamp!
	end_date: Timestamp!
}

type DateRangeRequiredOutput {
	start_date: Timestamp
	end_date: Timestamp
}

type LengthRange {
	min: Float
	max: Float
}

input LengthRangeInput {
	min: Float
	max: Float
}

type UserProperty {
	id: ID!
	name: String!
	value: String!
}

input UserPropertyInput {
	id: ID!
	name: String!
	value: String!
}

type User {
	id: ID!
}

type Admin {
	id: ID!
	name: String!
	uid: String!
	email: String!
	phone: String
	photo_url: String
	slack_im_channel_id: String
	email_verified: Boolean
	referral: String
	user_defined_role: String
	user_defined_team_size: String
	heard_about: String
	about_you_details_filled: Boolean
	user_defined_persona: String
}

type WorkspaceAdminRole {
	workspaceId: ID!
	admin: Admin!
	role: String!
	projectIds: [ID!]!
}

# A subset of Admin. This type will contain fields that are allowed to be exposed to other users.
type SanitizedAdmin {
	id: ID!
	name: String
	email: String!
	photo_url: String
}

input SanitizedAdminInput {
	id: ID!
	name: String
	email: String!
}

type SessionsHistogram {
	bucket_times: [Timestamp!]!
	sessions_without_errors: [Int64!]!
	sessions_with_errors: [Int64!]!
	total_sessions: [Int64!]!
}

type ErrorsHistogram {
	bucket_times: [Timestamp!]!
	error_objects: [Int64!]!
}

type SessionResults {
	sessions: [Session!]!
	totalCount: Int64!
	totalLength: Int64!
	totalActiveLength: Int64!
}

type ErrorResults {
	error_groups: [ErrorGroup!]!
	totalCount: Int64!
}

type ErrorObjectResults {
	error_objects: [ErrorObjectNode!]!
	totalCount: Int64!
}

# 2 way connector type between highlight objects and external integration objects
# should be used to update information from/to platforms
type ExternalAttachment {
	id: ID!
	integration_type: IntegrationType!

	external_id: String!
	title: String

	# associations to highlight objects
	session_comment_id: Int
	error_comment_id: Int
}

type SessionComment {
	id: ID!
	project_id: ID!
	timestamp: Int
	created_at: Timestamp!
	updated_at: Timestamp!
	session_id: Int!
	session_secure_id: String!
	author: SanitizedAdmin
	text: String!
	x_coordinate: Float
	y_coordinate: Float
	type: SessionCommentType!
	metadata: Any
	tags: [String]!
	attachments: [ExternalAttachment]!
	replies: [CommentReply]!
}

type SessionInsight {
	id: ID!
	session_id: Int!
	insight: String!
}

type SessionQuery {
	id: ID!
	project_id: ID!
}

type SlackSyncResponse {
	success: Boolean!
	newChannelsAddedCount: Int!
}

type SessionCommentTag {
	id: ID!
	name: String!
}

input SessionCommentTagInput {
	id: ID
	name: String!
}

type ErrorComment {
	id: ID!
	project_id: ID!
	created_at: Timestamp!
	error_id: Int!
	error_secure_id: String!
	updated_at: Timestamp!
	author: SanitizedAdmin!
	text: String!
	attachments: [ExternalAttachment]!
	replies: [CommentReply]!
}

type CommentReply {
	id: ID!
	created_at: Timestamp!
	updated_at: Timestamp!

	author: SanitizedAdmin!
	text: String!
}

enum SessionLifecycle {
	All
	Live
	Completed
}

type DailySessionCount {
	project_id: ID!
	date: Timestamp!
	count: Int64!
}

type DailyErrorCount {
	project_id: ID!
	date: Timestamp!
	count: Int64!
}

type ErrorDistributionItem {
	error_group_id: ID!
	date: Timestamp!
	name: String!
	value: Int64!
}

type ErrorGroupTagAggregationBucket {
	key: String!
	doc_count: Int64!
	percent: Float!
}

type ErrorGroupTagAggregation {
	key: String!
	buckets: [ErrorGroupTagAggregationBucket!]!
}

type Dashboard {
	id: ID!
	project_id: ID!
	layout: String!
	name: String!
	last_admin_to_edit_id: ID!
}

enum AlertState {
	Normal
	Pending
	Alerting
	AlertingSilently
	NoData
	Error
}

enum AlertDestinationType {
	Slack
	Discord
	MicrosoftTeams
	Webhook
	Email
}

type AlertDestination {
	id: ID!
	alert_id: ID!
	destination_type: AlertDestinationType!
	type_id: String!
	type_name: String!
}

input AlertDestinationInput {
	destination_type: AlertDestinationType!
	type_id: String!
	type_name: String!
}

type Alert {
	id: ID!
	updated_at: Timestamp!
	metric_id: String!
	name: String!
	product_type: ProductType!
	function_type: MetricAggregator!
	function_column: String
	query: String
	group_by_key: String
	disabled: Boolean!
	last_admin_to_edit_id: ID
	destinations: [AlertDestination]!

	# threshold alerts
	below_threshold: Boolean
	threshold_value: Float
	threshold_window: Int
	threshold_cooldown: Int
}

type AlertStateChange {
	id: ID!
	timestamp: Timestamp!
	AlertID: ID!
	State: AlertState!
	PreviousState: AlertState!
	Title: String!
	GroupByKey: String!
}

type SanitizedSlackChannel {
	webhook_channel: String
	webhook_channel_id: String
}

input SanitizedSlackChannelInput {
	webhook_channel_name: String
	webhook_channel_id: String
}

type DiscordChannel {
	id: String!
	name: String!
}

input DiscordChannelInput {
	name: String!
	id: String!
}

type MicrosoftTeamsChannel {
	id: String!
	name: String!
}

type IssuesSearchResult {
	id: String!
	title: String!
	issue_url: String!
}

input MicrosoftTeamsChannelInput {
	name: String!
	id: String!
}

type WebhookDestination {
	url: String!
	authorization: String
}

input WebhookDestinationInput {
	url: String!
	authorization: String
}

type ErrorAlert {
	id: ID!
	updated_at: Timestamp!
	Name: String
	ChannelsToNotify: [SanitizedSlackChannel]!
	DiscordChannelsToNotify: [DiscordChannel!]!
	MicrosoftTeamsChannelsToNotify: [MicrosoftTeamsChannel!]!
	WebhookDestinations: [WebhookDestination!]!
	EmailsToNotify: [String]!
	Query: String!
	CountThreshold: Int!
	ThresholdWindow: Int
	LastAdminToEditID: ID
	Type: String!
	RegexGroups: [String]!
	Frequency: Int!
	DailyFrequency: [Int64]!
	disabled: Boolean!
	default: Boolean!
}

type TrackProperty {
	id: ID!
	name: String!
	value: String!
}

input TrackPropertyInput {
	id: ID
	name: String!
	value: String!
}

type SessionAlert {
	id: ID!
	updated_at: Timestamp!
	Name: String
	ChannelsToNotify: [SanitizedSlackChannel]!
	DiscordChannelsToNotify: [DiscordChannel!]!
	MicrosoftTeamsChannelsToNotify: [MicrosoftTeamsChannel!]!
	WebhookDestinations: [WebhookDestination!]!
	EmailsToNotify: [String]!
	ExcludedEnvironments: [String]!
	CountThreshold: Int!
	TrackProperties: [TrackProperty]!
	UserProperties: [UserProperty]!
	ThresholdWindow: Int
	LastAdminToEditID: ID
	Type: String!
	ExcludeRules: [String]!
	DailyFrequency: [Int64]!
	disabled: Boolean!
	default: Boolean!
}

type LogAlert {
	id: ID!
	updated_at: Timestamp!
	Name: String!
	ChannelsToNotify: [SanitizedSlackChannel!]!
	DiscordChannelsToNotify: [DiscordChannel!]!
	MicrosoftTeamsChannelsToNotify: [MicrosoftTeamsChannel!]!
	WebhookDestinations: [WebhookDestination!]!
	EmailsToNotify: [String!]!
	CountThreshold: Int!
	ThresholdWindow: Int!
	LastAdminToEditID: ID
	Type: String!
	DailyFrequency: [Int64]!
	disabled: Boolean!
	query: String!
	BelowThreshold: Boolean!
	default: Boolean!
}

type WorkspaceInviteLink {
	id: ID!
	invitee_email: String
	invitee_role: String!
	expiration_date: Timestamp!
	secret: String!
	created_at: Timestamp!
}

type WorkspaceForInviteLink {
	expiration_date: Timestamp
	invitee_email: String
	secret: String!
	workspace_id: ID!
	workspace_name: String!
	existing_account: Boolean!
	project_id: ID!
}

type SessionPayload {
	events: [Any]!
	errors: [ErrorObject]!
	rage_clicks: [RageClickEvent!]!
	session_comments: [SessionComment]!
	last_user_interaction_time: Timestamp!
}

type Metric {
	name: String!
	value: Float!
}

type DashboardPayload {
	date: String!
	value: Float!
	aggregator: MetricAggregator!
	group: String
}

type HistogramBucket {
	bucket: Float!
	range_start: Float!
	range_end: Float!
	count: Int!
}

type CategoryHistogramBucket {
	category: String!
	count: Int!
}

type CategoryHistogramPayload {
	buckets: [CategoryHistogramBucket!]!
}

type IntegrationStatus {
	integrated: Boolean!
	resourceType: String!
	createdAt: Timestamp
}

enum DashboardChartType {
	Timeline
	TimelineBar
	Histogram
}

input DashboardMetricConfigInput {
	name: String!
	description: String!
	component_type: MetricViewComponentType
	max_good_value: Float
	max_needs_improvement_value: Float
	poor_value: Float
	units: String
	help_article: String
	chart_type: DashboardChartType
	aggregator: MetricAggregator
	min_value: Float
	min_percentile: Float
	max_value: Float
	max_percentile: Float
	filters: [MetricTagFilterInput!]
	groups: [String!]
}

enum MetricViewComponentType {
	KeyPerformanceGauge
	SessionCountChart
	ErrorCountChart
	ReferrersTable
	ActiveUsersTable
	RageClicksTable
	TopRoutesTable
}

type DashboardMetricConfig {
	name: String!
	description: String!
	component_type: MetricViewComponentType
	max_good_value: Float
	max_needs_improvement_value: Float
	poor_value: Float
	units: String
	help_article: String
	chart_type: DashboardChartType
	aggregator: MetricAggregator
	min_value: Float
	min_percentile: Float
	max_value: Float
	max_percentile: Float
	filters: [MetricTagFilter!]
	groups: [String!]
}

type DashboardDefinition {
	id: ID!
	updated_at: Timestamp!
	project_id: ID!
	name: String!
	metrics: [DashboardMetricConfig!]!
	last_admin_to_edit_id: Int
	layout: String
	is_default: Boolean
}

type MetricPreview {
	date: Timestamp!
	value: Float!
}

type MetricMonitor {
	id: ID!
	updated_at: Timestamp!
	name: String!
	channels_to_notify: [SanitizedSlackChannel]!
	discord_channels_to_notify: [DiscordChannel!]!
	webhook_destinations: [WebhookDestination!]!
	emails_to_notify: [String]!
	aggregator: MetricAggregator!
	period_minutes: Int
	metric_to_monitor: String!
	last_admin_to_edit_id: ID!
	threshold: Float!
	units: String
	disabled: Boolean!
	filters: [MetricTagFilter!]
}

type EventChunk {
	session_id: Int!
	chunk_index: Int!
	timestamp: Int64!
}

input VercelProjectMappingInput {
	vercel_project_id: String!
	# `new_project_name` only present if the intentiont to create a brand new project
	new_project_name: String
	project_id: ID
}

input ClickUpProjectMappingInput {
	project_id: ID!
	clickup_space_id: String!
}

input IntegrationProjectMappingInput {
	project_id: ID!
	external_id: String!
}

type VercelProjectMapping {
	vercel_project_id: String!
	project_id: ID!
}

type ClickUpProjectMapping {
	project_id: ID!
	clickup_space_id: String!
}

type IntegrationProjectMapping {
	project_id: ID!
	external_id: String!
}

type OAuthClient {
	id: String!
	created_at: Timestamp!
	app_name: String!
}

type SystemConfiguration {
	maintenance_start: Timestamp
	maintenance_end: Timestamp
}

type SessionExportWithSession {
	created_at: Timestamp!
	type: String!
	url: String!
	error: String!
	# session details
	secure_id: String!
	identifier: String!
	active_length: Int
}

enum EmailOptOutCategory {
	All
	Digests
	Billing
	SessionDigests
}

type FunnelStep {
	title: String!
	query: String!
}

type Graph {
	id: ID!
	type: String!
	title: String!
	productType: ProductType!
	query: String!
	metric: String!
	functionType: MetricAggregator!
	groupByKeys: StringArray
	bucketByKey: String
	bucketCount: Int
	bucketInterval: Int
	limit: Int
	limitFunctionType: MetricAggregator
	limitMetric: String
	funnelSteps: [FunnelStep!]
	display: String
	nullHandling: String
}

type Variable {
	key: String!
	defaultValues: [String!]!
	suggestionType: SuggestionType!
	field: String
}

type Visualization {
	id: ID!
	updatedAt: Timestamp!
	projectId: ID!
	name: String!
	updatedByAdmin: SanitizedAdmin
	graphs: [Graph!]!
	timePreset: String
	variables: [Variable!]!
}

type VisualizationsResponse {
	count: Int!
	results: [Visualization!]!
}

input FunnelStepInput {
	title: String!
	query: String!
}

input GraphInput {
	id: ID
	visualizationId: ID!
	afterGraphId: ID
	type: String!
	title: String!
	productType: ProductType!
	query: String!
	metric: String!
	functionType: MetricAggregator!
	groupByKeys: StringArray
	bucketByKey: String
	bucketCount: Int
	bucketInterval: Int
	limit: Int
	limitFunctionType: MetricAggregator
	limitMetric: String
	funnelSteps: [FunnelStepInput!]
	display: String
	nullHandling: String
}

input VariableInput {
	key: String!
	defaultValues: [String!]!
	suggestionType: SuggestionType!
	field: String
}

input VisualizationInput {
	id: ID
	projectId: ID!
	name: String
	graphIds: [ID!]
	timePreset: String
	variables: [VariableInput!]
}

scalar Upload

type Query {
	accounts: [Account]
	account_details(workspace_id: ID!): AccountDetails!
	session(secure_id: String!): Session
	events(session_secure_id: String!): [Any]
	session_intervals(session_secure_id: String!): [SessionInterval!]!
	timeline_indicator_events(
		session_secure_id: String!
	): [TimelineIndicatorEvent!]!
	websocket_events(session_secure_id: String!): [Any]
	rage_clicks(session_secure_id: String!): [RageClickEvent!]!
	rageClicksForProject(
		project_id: ID!
		lookback_days: Float!
	): [RageClickEventForProject!]!
	# deprecated - use error_groups
	error_groups_clickhouse(
		project_id: ID!
		count: Int!
		query: ClickhouseQuery!
		page: Int
	): ErrorResults!
	error_groups(
		project_id: ID!
		count: Int!
		params: QueryInput!
		page: Int
	): ErrorResults!
	# deprecated - use errors_histogram
	errors_histogram_clickhouse(
		project_id: ID!
		query: ClickhouseQuery!
		histogram_options: DateHistogramOptions!
	): ErrorsHistogram!
	errors_histogram(
		project_id: ID!
		params: QueryInput!
		histogram_options: DateHistogramOptions!
	): ErrorsHistogram!
	error_group(secure_id: String!, use_clickhouse: Boolean): ErrorGroup
	error_object(id: ID!): ErrorObject
	error_objects(
		project_id: String
		error_group_secure_id: String
		count: Int!
		params: QueryInput!
		page: Int
	): ErrorObjectResults!
	error_object_for_log(log_cursor: String!): ErrorObject
	error_instance(
		error_group_secure_id: String!
		error_object_id: ID
		params: QueryInput
	): ErrorInstance
	enhanced_user_details(session_secure_id: String!): EnhancedUserDetailsResult
	errors(session_secure_id: String!): [ErrorObject]
	resources(session_secure_id: String!): [Any]
	web_vitals(session_secure_id: String!): [Metric!]!
	session_comments(session_secure_id: String!): [SessionComment]!
	session_comment_tags_for_project(project_id: ID!): [SessionCommentTag!]!
	session_comments_for_admin: [SessionComment]!
	session_comments_for_project(project_id: ID!): [SessionComment]!
	isSessionPending(session_secure_id: String!): Boolean
	error_issue(error_group_secure_id: String!): [ExternalAttachment]!
	error_comments(error_group_secure_id: String!): [ErrorComment]!
	error_comments_for_admin: [ErrorComment]!
	error_comments_for_project(project_id: ID!): [ErrorComment]!
	workspace_admins(workspace_id: ID!): [WorkspaceAdminRole!]!
	workspace_admins_by_project_id(project_id: ID!): [WorkspaceAdminRole!]!
	clientIntegration(project_id: ID!): IntegrationStatus!
	serverIntegration(project_id: ID!): IntegrationStatus!
	logsIntegration(project_id: ID!): IntegrationStatus!
	tracesIntegration(project_id: ID!): IntegrationStatus!
	unprocessedSessionsCount(project_id: ID!): Int64
	liveUsersCount(project_id: ID!): Int64
	adminHasCreatedComment(admin_id: ID!): Boolean
	projectHasViewedASession(project_id: ID!): Session
	dailySessionsCount(
		project_id: ID!
		date_range: DateRangeInput!
	): [DailySessionCount]!
	dailyErrorsCount(
		project_id: ID!
		date_range: DateRangeInput!
	): [DailyErrorCount]!
	dailyErrorFrequency(
		project_id: ID!
		error_group_secure_id: String!
		date_offset: Int!
	): [Int64!]!
	errorGroupFrequencies(
		project_id: ID!
		error_group_secure_ids: [String!]
		params: ErrorGroupFrequenciesParamsInput!
		metric: String
		use_clickhouse: Boolean
	): [ErrorDistributionItem]!
	errorGroupTags(
		error_group_secure_id: String!
		use_clickhouse: Boolean
	): [ErrorGroupTagAggregation!]!

	referrers(project_id: ID!, lookback_days: Float!): [ReferrerTablePayload]!
	newUsersCount(project_id: ID!, lookback_days: Float!): NewUsersCount
	topUsers(project_id: ID!, lookback_days: Float!): [TopUsersPayload]!
	averageSessionLength(
		project_id: ID!
		lookback_days: Float!
	): AverageSessionLength
	userFingerprintCount(
		project_id: ID!
		lookback_days: Float!
	): UserFingerprintCount
	# deprecated - use sessions
	sessions_clickhouse(
		project_id: ID!
		count: Int!
		query: ClickhouseQuery!
		sort_field: String
		sort_desc: Boolean!
		page: Int
	): SessionResults!
	sessions(
		project_id: ID!
		count: Int!
		params: QueryInput!
		sort_field: String
		sort_desc: Boolean!
		page: Int
	): SessionResults!
	# deprecated - use sessions_histogram
	sessions_histogram_clickhouse(
		project_id: ID!
		query: ClickhouseQuery!
		histogram_options: DateHistogramOptions!
	): SessionsHistogram!
	sessions_histogram(
		project_id: ID!
		params: QueryInput!
		histogram_options: DateHistogramOptions!
	): SessionsHistogram!
	session_users_report(
		project_id: ID!
		params: QueryInput!
	): [SessionsReportRow!]!
	billingDetailsForProject(project_id: ID!): BillingDetails
	billingDetails(workspace_id: ID!): BillingDetails!
	usageHistory(
		workspace_id: ID!
		product_type: ProductType!
		date_range: DateRangeRequiredInput
	): UsageHistory!
	# gets all the projects of a user
	field_suggestion(project_id: ID!, name: String!, query: String!): [Field]
	property_suggestion(project_id: ID!, query: String!, type: String!): [Field]
	error_field_suggestion(
		project_id: ID!
		name: String!
		query: String!
	): [ErrorField]
	projects: [Project]
	workspaces: [Workspace]
	workspaces_count: Int64!
	joinable_workspaces: [Workspace]
	alerts(project_id: ID!): [Alert]!
	alert(id: ID!): Alert!
	alert_state_changes(alert_id: ID!): [AlertStateChange]!
	error_alerts(project_id: ID!): [ErrorAlert]!
	new_user_alerts(project_id: ID!): [SessionAlert]
	track_properties_alerts(project_id: ID!): [SessionAlert]!
	user_properties_alerts(project_id: ID!): [SessionAlert]!
	new_session_alerts(project_id: ID!): [SessionAlert]!
	rage_click_alerts(project_id: ID!): [SessionAlert]!
	log_alerts(project_id: ID!): [LogAlert]!
	log_alert(id: ID!): LogAlert!
	projectSuggestion(query: String!): [Project]!
	environment_suggestion(project_id: ID!): [Field]
	identifier_suggestion(project_id: ID!, query: String!): [String!]!
	slack_channel_suggestion(project_id: ID!): [SanitizedSlackChannel!]!
	microsoft_teams_channel_suggestions(
		project_id: ID!
	): [MicrosoftTeamsChannel!]!
	discord_channel_suggestions(project_id: ID!): [DiscordChannel!]!
	generate_zapier_access_token(project_id: ID!): String!
	search_issues(
		integration_type: IntegrationType!
		project_id: ID!
		query: String!
	): [IssuesSearchResult!]!
	is_integrated_with(
		integration_type: IntegrationType!
		project_id: ID!
	): Boolean!
	is_workspace_integrated_with(
		integration_type: IntegrationType!
		workspace_id: ID!
	): Boolean!
	is_project_integrated_with(
		integration_type: IntegrationType!
		project_id: ID!
	): Boolean!
	vercel_projects(project_id: ID!): [VercelProject!]!
	vercel_project_mappings(project_id: ID!): [VercelProjectMapping!]!
	clickup_teams(workspace_id: ID!): [ClickUpTeam!]!
	clickup_project_mappings(workspace_id: ID!): [ClickUpProjectMapping!]!
	clickup_folders(project_id: ID!): [ClickUpFolder!]!
	clickup_folderless_lists(project_id: ID!): [ClickUpList!]!
	height_lists(project_id: ID!): [HeightList!]!
	height_workspaces(workspace_id: ID!): [HeightWorkspace!]!
	integration_project_mappings(
		workspace_id: ID!
		integration_type: IntegrationType
	): [IntegrationProjectMapping!]!
	linear_teams(project_id: ID!): [LinearTeam!]
	jira_projects(workspace_id: ID!): [JiraProject!]
	gitlab_projects(workspace_id: ID!): [GitlabProject!]
	github_repos(workspace_id: ID!): [GitHubRepo!]
	github_issue_labels(workspace_id: ID!, repository: String!): [String!]!
	project(id: ID!): Project
	projectSettings(projectId: ID!): AllProjectSettings
	workspace(id: ID!): Workspace
	workspace_for_invite_link(secret: String!): WorkspaceForInviteLink!
	workspace_invite_links(workspace_id: ID!): WorkspaceInviteLink!
	workspacePendingInvites(workspace_id: ID!): [WorkspaceInviteLink]!
	workspaceSettings(workspace_id: ID!): AllWorkspaceSettings
	workspace_for_project(project_id: ID!): Workspace
	admin: Admin
	admin_role(workspace_id: ID!): WorkspaceAdminRole
	admin_role_by_project(project_id: ID!): WorkspaceAdminRole
	saved_segments(
		project_id: ID!
		entity_type: SavedSegmentEntityType!
	): [SavedSegment]
	api_key_to_org_id(api_key: String!): ID
	get_source_map_upload_urls(api_key: String!, paths: [String!]!): [String!]!
	customer_portal_url(workspace_id: ID!): String!
	subscription_details(workspace_id: ID!): SubscriptionDetails!
	dashboard_definitions(project_id: ID!): [DashboardDefinition]!
	metric_tags(
		project_id: ID!
		metric_name: String!
		query: String
	): [String!]!
	metric_tag_values(
		project_id: ID!
		metric_name: String!
		tag_name: String!
	): [String!]!
	metrics_timeline(
		project_id: ID!
		metric_name: String!
		params: DashboardParamsInput!
	): [DashboardPayload]!
	network_histogram(
		project_id: ID!
		params: NetworkHistogramParamsInput!
	): CategoryHistogramPayload
	metric_monitors(project_id: ID!, metric_name: String): [MetricMonitor]!
	event_chunk_url(secure_id: String!, index: Int!): String!
	event_chunks(secure_id: String!): [EventChunk!]!
	sourcemap_files(project_id: ID!, version: String): [S3File!]!
	sourcemap_versions(project_id: ID!): [String!]!
	oauth_client_metadata(client_id: String!): OAuthClient
	email_opt_outs(token: String, admin_id: ID): [EmailOptOutCategory!]!
	ai_query_suggestion(
		time_zone: String!
		project_id: ID!
		product_type: ProductType!
		query: String!
	): QueryOutput!
	logs(
		project_id: ID!
		params: QueryInput!
		after: String
		before: String
		at: String
		direction: SortDirection!
		limit: Int
	): LogConnection!
	logs_histogram(project_id: ID!, params: QueryInput!): LogsHistogram!
	logs_metrics(
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String!
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	logs_keys(
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
	): [QueryKey!]!
	logs_key_values(
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
	): [String!]!
	logs_error_objects(log_cursors: [String!]!): [ErrorObject!]!
	existing_logs_traces(
		project_id: ID!
		trace_ids: [String!]!
		date_range: DateRangeRequiredInput!
	): [String!]!
	error_resolution_suggestion(error_object_id: ID!): String!
	session_insight(secure_id: String!): SessionInsight
	session_exports(project_id: ID!): [SessionExportWithSession!]!
	system_configuration: SystemConfiguration!

	services(
		project_id: ID!
		after: String
		before: String
		query: String
	): ServiceConnection
	serviceByName(project_id: ID!, name: String!): Service
	error_tags: [ErrorTag]
	match_error_tag(query: String!): [MatchedErrorTag]
	trace(
		project_id: ID!
		trace_id: String!
		timestamp: Timestamp!
		session_secure_id: String
	): TracePayload
	traces(
		project_id: ID!
		params: QueryInput!
		after: String
		before: String
		at: String
		direction: SortDirection!
		limit: Int
	): TraceConnection!
	traces_metrics(
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	traces_keys(
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
	): [QueryKey!]!
	traces_key_values(
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
	): [String!]!
	errors_keys(
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
	): [QueryKey!]!
	errors_key_values(
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
	): [String!]!
	errors_metrics(
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String!
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	sessions_keys(
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
	): [QueryKey!]!
	sessions_key_values(
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
	): [String!]!
	sessions_metrics(
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String!
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	events_keys(
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
		event: String
	): [QueryKey!]!
	events_key_values(
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
		event: String
	): [String!]!
	events_metrics(
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String!
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	metrics(
		product_type: ProductType!
		project_id: ID!
		params: QueryInput!
		column: String!
		metric_types: [MetricAggregator!]!
		group_by: [String!]!
		bucket_by: String!
		bucket_count: Int
		bucket_window: Int
		limit: Int
		limit_aggregator: MetricAggregator
		limit_column: String
	): MetricsBuckets!
	keys(
		product_type: ProductType
		project_id: ID!
		date_range: DateRangeRequiredInput!
		query: String
		type: KeyType
		event: String
	): [QueryKey!]!
	key_values(
		product_type: ProductType
		project_id: ID!
		key_name: String!
		date_range: DateRangeRequiredInput!
		query: String
		count: Int
		event: String
	): [String!]!
	visualization(id: ID!): Visualization!
	visualizations(
		project_id: ID!
		input: String!
		count: Int!
		offset: Int!
	): VisualizationsResponse!
	graph(id: ID!): Graph!
	log_lines(
		product_type: ProductType!
		project_id: ID!
		params: QueryInput!
	): [LogLine!]!
}

type Mutation {
	updateAdminAndCreateWorkspace(
		admin_and_workspace_details: AdminAndWorkspaceDetails!
	): Project
	updateAdminAboutYouDetails(adminDetails: AdminAboutYouDetails!): Boolean!
	createAdmin: Admin!
	createProject(name: String!, workspace_id: ID!): Project
	createWorkspace(name: String!, promo_code: String): Workspace
	editProject(
		id: ID!
		name: String
		billing_email: String
		excluded_users: StringArray
		error_filters: StringArray
		error_json_paths: StringArray
		rage_click_window_seconds: Int
		rage_click_radius_pixels: Int
		rage_click_count: Int
		filter_chrome_extension: Boolean
	): Project
	editProjectSettings(
		projectId: ID!
		name: String
		billing_email: String
		excluded_users: StringArray
		error_filters: StringArray
		error_json_paths: StringArray
		rage_click_window_seconds: Int
		rage_click_radius_pixels: Int
		rage_click_count: Int
		filter_chrome_extension: Boolean
		filterSessionsWithoutError: Boolean
		autoResolveStaleErrorsDayInterval: Int
		sampling: SamplingInput
	): AllProjectSettings
	editWorkspace(id: ID!, name: String): Workspace
	editWorkspaceSettings(
		workspace_id: ID!
		ai_application: Boolean
		ai_insights: Boolean
		ai_query_builder: Boolean
	): AllWorkspaceSettings
	exportSession(session_secure_id: String!): Boolean!
	markErrorGroupAsViewed(
		error_secure_id: String!
		viewed: Boolean
	): ErrorGroup
	markSessionAsViewed(secure_id: String!, viewed: Boolean): Session
	updateErrorGroupState(
		secure_id: String!
		state: ErrorState!
		snoozed_until: Timestamp
	): ErrorGroup
	deleteProject(id: ID!): Boolean
	sendAdminWorkspaceInvite(
		workspace_id: ID!
		email: String!
		role: String!
		projectIds: [ID!]!
	): String
	addAdminToWorkspace(workspace_id: ID!, invite_id: String!): ID
	deleteInviteLinkFromWorkspace(
		workspace_id: ID!
		workspace_invite_link_id: ID!
	): Boolean!
	joinWorkspace(workspace_id: ID!): ID
	updateAllowedEmailOrigins(
		workspace_id: ID!
		allowed_auto_join_email_origins: String!
	): ID
	changeAdminRole(
		workspace_id: ID!
		admin_id: ID!
		new_role: String!
	): WorkspaceAdminRole!
	changeProjectMembership(
		workspace_id: ID!
		admin_id: ID!
		project_ids: [ID!]!
	): WorkspaceAdminRole!
	deleteAdminFromWorkspace(workspace_id: ID!, admin_id: ID!): ID
	emailSignup(email: String!): String!
	createSavedSegment(
		project_id: ID!
		name: String!
		entity_type: SavedSegmentEntityType!
		query: String!
	): SavedSegment
	editSavedSegment(
		id: ID!
		project_id: ID!
		name: String!
		entity_type: SavedSegmentEntityType!
		query: String!
	): Boolean
	deleteSavedSegment(segment_id: ID!): Boolean
	# If this endpoint returns a checkout_id, we initiate a stripe checkout.
	# Otherwise, we simply update the subscription.
	createOrUpdateStripeSubscription(workspace_id: ID!): String
	handleAWSMarketplace(workspace_id: ID!, code: String!): Boolean
	updateBillingDetails(workspace_id: ID!): Boolean
	saveBillingPlan(
		workspace_id: ID!
		sessionsLimitCents: Int
		sessionsRetention: RetentionPeriod!
		errorsLimitCents: Int
		errorsRetention: RetentionPeriod!
		logsLimitCents: Int
		logsRetention: RetentionPeriod!
		tracesLimitCents: Int
		tracesRetention: RetentionPeriod!
	): Boolean
	createSessionComment(
		project_id: ID!
		session_secure_id: String!
		session_timestamp: Int!
		text: String!
		text_for_email: String!
		x_coordinate: Float!
		y_coordinate: Float!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
		session_url: String!
		time: Float!
		author_name: String!
		session_image: String
		issue_title: String
		issue_description: String
		issue_team_id: String
		issue_type_id: String
		integrations: [IntegrationType]!
		tags: [SessionCommentTagInput]!
		additional_context: String
	): SessionComment
	createSessionCommentWithExistingIssue(
		project_id: ID!
		session_secure_id: String!
		session_timestamp: Int!
		text: String!
		text_for_email: String!
		x_coordinate: Float!
		y_coordinate: Float!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
		session_url: String!
		time: Float!
		author_name: String!
		session_image: String
		tags: [SessionCommentTagInput]!
		integrations: [IntegrationType]!
		issue_title: String
		issue_url: String!
		issue_id: String!
		additional_context: String
	): SessionComment
	createIssueForSessionComment(
		project_id: ID!
		session_url: String!
		session_comment_id: Int!
		author_name: String!
		text_for_attachment: String!
		time: Float!
		issue_title: String
		issue_description: String
		issue_team_id: String
		issue_type_id: String
		integrations: [IntegrationType]!
	): SessionComment
	linkIssueForSessionComment(
		project_id: ID!
		session_url: String!
		session_comment_id: Int!
		author_name: String!
		text_for_attachment: String!
		time: Float!
		issue_title: String
		issue_url: String!
		issue_id: String!
		integrations: [IntegrationType]!
	): SessionComment
	deleteSessionComment(id: ID!): Boolean
	muteSessionCommentThread(id: ID!, has_muted: Boolean): Boolean
	replyToSessionComment(
		comment_id: ID!
		text: String!
		text_for_email: String!
		sessionURL: String!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
	): CommentReply
	createErrorComment(
		project_id: ID!
		error_group_secure_id: String!
		text: String!
		text_for_email: String!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
		error_url: String!
		author_name: String!
		issue_title: String
		issue_description: String
		issue_team_id: String
		issue_type_id: String
		integrations: [IntegrationType]!
	): ErrorComment
	createErrorCommentForExistingIssue(
		project_id: ID!
		error_group_secure_id: String!
		text: String!
		text_for_email: String!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
		error_url: String!
		author_name: String!
		issue_url: String!
		issue_title: String!
		issue_id: String!
		integrations: [IntegrationType]!
	): ErrorComment
	removeErrorIssue(error_issue_id: ID!): Boolean
	muteErrorCommentThread(id: ID!, has_muted: Boolean): Boolean
	createIssueForErrorComment(
		project_id: ID!
		error_url: String!
		error_comment_id: Int!
		author_name: String!
		text_for_attachment: String!
		issue_title: String
		issue_description: String
		issue_team_id: String
		issue_type_id: String
		integrations: [IntegrationType]!
	): ErrorComment
	linkIssueForErrorComment(
		project_id: ID!
		error_url: String!
		error_comment_id: Int!
		author_name: String!
		text_for_attachment: String!
		issue_title: String
		issue_description: String
		issue_url: String!
		issue_id: String!
		integrations: [IntegrationType]!
	): ErrorComment
	deleteErrorComment(id: ID!): Boolean
	replyToErrorComment(
		comment_id: ID!
		text: String!
		text_for_email: String!
		errorURL: String!
		tagged_admins: [SanitizedAdminInput]!
		tagged_slack_users: [SanitizedSlackChannelInput]!
	): CommentReply
	addIntegrationToProject(
		integration_type: IntegrationType
		project_id: ID!
		code: String!
	): Boolean!
	removeIntegrationFromProject(
		integration_type: IntegrationType
		project_id: ID!
	): Boolean!
	addIntegrationToWorkspace(
		integration_type: IntegrationType
		workspace_id: ID!
		code: String!
	): Boolean!
	removeIntegrationFromWorkspace(
		integration_type: IntegrationType!
		workspace_id: ID!
	): Boolean!
	syncSlackIntegration(project_id: ID!): SlackSyncResponse!
	createMetricMonitor(
		project_id: ID!
		name: String!
		aggregator: MetricAggregator!
		periodMinutes: Int
		threshold: Float!
		units: String
		metric_to_monitor: String!
		slack_channels: [SanitizedSlackChannelInput]!
		discord_channels: [DiscordChannelInput!]!
		webhook_destinations: [WebhookDestinationInput!]!
		emails: [String]!
		filters: [MetricTagFilterInput!]
	): MetricMonitor
	updateMetricMonitor(
		metric_monitor_id: ID!
		project_id: ID!
		name: String
		aggregator: MetricAggregator
		periodMinutes: Int
		threshold: Float
		units: String
		metric_to_monitor: String
		slack_channels: [SanitizedSlackChannelInput]
		discord_channels: [DiscordChannelInput!]!
		webhook_destinations: [WebhookDestinationInput!]!
		emails: [String]
		disabled: Boolean
		filters: [MetricTagFilterInput!]
	): MetricMonitor
	createAlert(
		project_id: ID!
		name: String!
		product_type: ProductType!
		function_type: MetricAggregator!
		function_column: String
		query: String
		group_by_key: String
		below_threshold: Boolean
		default: Boolean
		threshold_value: Float
		threshold_window: Int
		threshold_cooldown: Int
		destinations: [AlertDestinationInput!]!
	): Alert
	updateAlert(
		project_id: ID!
		alert_id: ID!
		name: String
		product_type: ProductType
		function_type: MetricAggregator
		function_column: String
		query: String
		group_by_key: String
		below_threshold: Boolean
		threshold_value: Float
		threshold_window: Int
		threshold_cooldown: Int
		destinations: [AlertDestinationInput!]
	): Alert
	updateAlertDisabled(
		project_id: ID!
		alert_id: ID!
		disabled: Boolean!
	): Boolean!
	deleteAlert(project_id: ID!, alert_id: ID!): Boolean!
	updateErrorAlert(
		project_id: ID!
		name: String
		error_alert_id: ID!
		count_threshold: Int
		threshold_window: Int
		slack_channels: [SanitizedSlackChannelInput]
		discord_channels: [DiscordChannelInput!]!
		microsoft_teams_channels: [MicrosoftTeamsChannelInput!]!
		webhook_destinations: [WebhookDestinationInput!]!
		emails: [String]
		query: String!
		regex_groups: [String]
		frequency: Int
		disabled: Boolean
	): ErrorAlert
	deleteErrorAlert(project_id: ID!, error_alert_id: ID!): ErrorAlert
	deleteMetricMonitor(project_id: ID!, metric_monitor_id: ID!): MetricMonitor
	updateSessionAlertIsDisabled(
		id: ID!
		project_id: ID!
		disabled: Boolean!
	): SessionAlert
	updateErrorAlertIsDisabled(
		id: ID!
		project_id: ID!
		disabled: Boolean!
	): ErrorAlert
	updateMetricMonitorIsDisabled(
		id: ID!
		project_id: ID!
		disabled: Boolean!
	): MetricMonitor

	updateSessionAlert(id: ID!, input: SessionAlertInput!): SessionAlert
	deleteSessionAlert(project_id: ID!, session_alert_id: ID!): SessionAlert
	updateLogAlert(id: ID!, input: LogAlertInput!): LogAlert
	deleteLogAlert(project_id: ID!, id: ID!): LogAlert
	updateLogAlertIsDisabled(
		id: ID!
		project_id: ID!
		disabled: Boolean!
	): LogAlert
	updateSessionIsPublic(
		session_secure_id: String!
		is_public: Boolean!
	): Session
	updateErrorGroupIsPublic(
		error_group_secure_id: String!
		is_public: Boolean!
	): ErrorGroup
	updateAllowMeterOverage(
		workspace_id: ID!
		allow_meter_overage: Boolean!
	): Workspace
	submitRegistrationForm(
		workspace_id: ID!
		team_size: String!
		role: String!
		use_case: String!
		heard_about: String!
		pun: String
	): Boolean
	requestAccess(project_id: ID!): Boolean
	modifyClearbitIntegration(workspace_id: ID!, enabled: Boolean!): Boolean
	upsertDashboard(
		id: ID
		project_id: ID!
		name: String!
		metrics: [DashboardMetricConfigInput!]!
		layout: String
		is_default: Boolean
	): ID!
	deleteDashboard(id: ID!): Boolean!
	deleteSessions(
		project_id: ID!
		params: QueryInput!
		sessionCount: Int!
	): Boolean!
	createCloudflareProxy(workspace_id: ID!, proxy_subdomain: String!): String!
	updateVercelProjectMappings(
		project_id: ID!
		project_mappings: [VercelProjectMappingInput!]!
	): Boolean!
	updateClickUpProjectMappings(
		workspace_id: ID!
		project_mappings: [ClickUpProjectMappingInput!]!
	): Boolean!
	updateIntegrationProjectMappings(
		workspace_id: ID!
		integration_type: IntegrationType!
		project_mappings: [IntegrationProjectMappingInput!]!
	): Boolean!

	updateEmailOptOut(
		token: String
		admin_id: ID
		category: EmailOptOutCategory!
		is_opt_out: Boolean!
		project_id: Int
	): Boolean!
	editServiceGithubSettings(
		id: ID!
		project_id: ID!
		github_repo_path: String
		build_prefix: String
		github_prefix: String
	): Service
	createErrorTag(title: String!, description: String!): ErrorTag!
	updateErrorTags: Boolean!
	upsertSlackChannel(project_id: ID!, name: String!): SanitizedSlackChannel!
	upsertDiscordChannel(project_id: ID!, name: String!): DiscordChannel!
	testErrorEnhancement(
		error_object_id: ID!
		github_repo_path: String!
		github_prefix: String
		build_prefix: String
		save_error: Boolean
	): ErrorObject
	upsertVisualization(visualization: VisualizationInput!): ID!
	deleteVisualization(id: ID!): Boolean!
	upsertGraph(graph: GraphInput!): Graph!
	deleteGraph(id: ID!): Boolean!
}

type Subscription {
	session_payload_appended(
		session_secure_id: String!
		initial_events_count: Int!
	): SessionPayload
}
