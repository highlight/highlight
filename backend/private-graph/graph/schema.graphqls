# MAIN GRAPH

scalar Any
scalar Time
scalar Int64

type Field {
    id: ID!
    name: String!
    value: String!
    type: String
}

type Session {
    id: ID!
    secure_id: String!
    fingerprint: Int
    os_name: String!
    os_version: String!
    browser_name: String!
    browser_version: String!
    city: String!
    state: String!
    postal: String!
    environment: String
    app_version: String
    client_version: String
    language: String!
    identifier: String!
    created_at: Time
    length: Int
    active_length: Int
    user_object: Any
    fields: [Field]
    viewed: Boolean
    starred: Boolean
    processed: Boolean
    first_time: Boolean
    field_group: String
    enable_strict_privacy: Boolean
    enable_recording_network_contents: Boolean
    object_storage_enabled: Boolean
    payload_size: Int64
    within_billing_quota: Boolean
    is_public: Boolean
}

type BillingDetails {
    plan: Plan!
    meter: Int64!
    sessionsOutOfQuota: Int64!
}

type Plan {
    type: PlanType!
    quota: Int!
}

enum PlanType {
    Free
    Basic
    Startup
    Enterprise
}

enum ErrorState {
    OPEN
    RESOLVED
    IGNORED
}

enum SessionCommentType {
    Admin
    FEEDBACK
}

type Project {
    id: ID!
    verbose_id: String!
    name: String!
    billing_email: String
    trial_end_date: Time
    slack_webhook_channel: String
    slack_channels: String
    secret: String
}

type Segment {
    id: ID!
    name: String!
    params: SearchParams!
    project_id: ID!
}

type ErrorSegment {
    id: ID!
    name: String!
    params: ErrorSearchParams!
    project_id: ID!
}

type ErrorObject {
    id: ID!
    project_id: Int!
    session_id: Int!
    error_group_id: Int!
    event: [String]!
    type: String!
    url: String!
    source: String
    lineNumber: Int
    columnNumber: Int
    stack_trace: [Any]
    timestamp: Time
    payload: String
}

type ErrorField {
    project_id: Int
    name: String!
    value: String!
}

type ErrorGroup {
    created_at: Time!
    id: ID!
    secure_id: String!
    project_id: Int!
    type: String!
    event: [String]!
    stack_trace: [ErrorTrace]!
    metadata_log: [ErrorMetadata]!
    mapped_stack_trace: String
    field_group: [ErrorField]
    state: ErrorState!
    environments: String
    error_frequency: [Int64]!
}

type ErrorMetadata {
    error_id: Int!
    session_id: Int!
    session_secure_id: String!
    environment: String
    timestamp: Time
    os: String
    browser: String
    visited_url: String
    fingerprint: String!
    identifier: String
}

type ErrorTrace {
    fileName: String
    lineNumber: Int
    functionName: String
    columnNumber: Int
    error: String
}

type ReferrerTablePayload {
    host: String!
    count: Int!
    percent: Float!
}

type TopUsersPayload {
    id: ID!
    identifier: String!
    total_active_time: Int!
    active_time_percentage: Float!
}

type NewUsersCount {
    count: Int64!
}

type AverageSessionLength {
    length: Float!
}

type UserFingerprintCount {
    count: Int64!
}

# NOTE: for SearchParams, if you make a change and want it to be reflected in both Segments and the default search UI,
# edit both Foo and FooInput
input SearchParamsInput {
    user_properties: [UserPropertyInput]
    excluded_properties: [UserPropertyInput]
    track_properties: [UserPropertyInput]
    excluded_track_properties: [UserPropertyInput]
    date_range: DateRangeInput
    length_range: LengthRangeInput
    os: String
    browser: String
    device_id: String
    visited_url: String
    referrer: String
    identified: Boolean
    hide_viewed: Boolean
    first_time: Boolean
}

type SearchParams {
    user_properties: [UserProperty]
    excluded_properties: [UserProperty]
    track_properties: [UserProperty]
    date_range: DateRange
    length_range: LengthRange
    os: String
    browser: String
    visited_url: String
    referrer: String
    identified: Boolean
    hide_viewed: Boolean
    first_time: Boolean
}

input ErrorSearchParamsInput {
    date_range: DateRangeInput
    os: String
    browser: String
    visited_url: String
    state: ErrorState
    event: String
}

type ErrorSearchParams {
    date_range: DateRange
    os: String
    browser: String
    visited_url: String
    state: ErrorState
    event: String
}

type DateRange {
    start_date: Time
    end_date: Time
}

input DateRangeInput {
    start_date: Time
    end_date: Time
}

type LengthRange {
    min: Float
    max: Float
}

input LengthRangeInput {
    min: Float
    max: Float
}

type UserProperty {
    id: ID!
    name: String!
    value: String!
}

input UserPropertyInput {
    id: ID
    name: String!
    value: String!
}

type User {
    id: ID!
}

type Admin {
    id: ID!
    name: String!
    email: String!
    photo_url: String
    slack_im_channel_id: String
}

# A subset of Admin. This type will contain fields that are allowed to be exposed to other users.
type SanitizedAdmin {
    id: ID!
    name: String
    email: String!
    photo_url: String
}

input SanitizedAdminInput {
    id: ID!
    name: String
    email: String!
}

type SessionResults {
    sessions: [Session!]!
    totalCount: Int64!
}

type ErrorResults {
    error_groups: [ErrorGroup!]!
    totalCount: Int64!
}

type SessionComment {
    id: ID!
    project_id: ID!
    timestamp: Int
    created_at: Time!
    updated_at: Time!
    session_id: Int!
    author: SanitizedAdmin
    text: String!
    x_coordinate: Float
    y_coordinate: Float
    type: SessionCommentType!
    metadata: Any
}

type ErrorComment {
    id: ID!
    project_id: ID!
    created_at: Time!
    error_id: Int!
    updated_at: Time!
    author: SanitizedAdmin!
    text: String!
}

enum SessionLifecycle {
    All
    Live
    Completed
}

type DailySessionCount {
    project_id: ID!
    date: Time!
    count: Int64!
}

type DailyErrorCount {
    project_id: ID!
    date: Time!
    count: Int64!
}

type SanitizedSlackChannel {
    webhook_channel: String
    webhook_channel_id: String
}

input SanitizedSlackChannelInput {
    webhook_channel_name: String
    webhook_channel_id: String
}

type ErrorAlert {
    id: ID!
    ChannelsToNotify: [SanitizedSlackChannel]!
    ExcludedEnvironments: [String]!
    CountThreshold: Int!
    ThresholdWindow: Int
}

type TrackProperty {
    id: ID!
    name: String!
    value: String!
}

input TrackPropertyInput {
    id: ID
    name: String!
    value: String!
}

type SessionAlert {
    id: ID!
    ChannelsToNotify: [SanitizedSlackChannel]!
    ExcludedEnvironments: [String]!
    CountThreshold: Int!
    TrackProperties: [TrackProperty]!
    UserProperties: [UserProperty]!
    ThresholdWindow: Int!
}

scalar Upload

type Query {
    session(id: ID, secure_id: String): Session
    events(session_id: ID, session_secure_id: String): [Any]
    error_groups(
        project_id: ID!
        count: Int!
        params: ErrorSearchParamsInput
    ): ErrorResults
    error_group(id: ID, secure_id: String): ErrorGroup
    messages(session_id: ID, session_secure_id: String): [Any]
    errors(session_id: ID, session_secure_id: String): [ErrorObject]
    resources(session_id: ID, session_secure_id: String): [Any]
    session_comments(
        session_id: ID
        session_secure_id: String
    ): [SessionComment]!
    session_comments_for_admin: [SessionComment]!
    session_comments_for_project(project_id: ID!): [SessionComment]!
    error_comments(
        error_group_id: ID
        error_group_secure_id: String
    ): [ErrorComment]!
    error_comments_for_admin: [ErrorComment]!
    error_comments_for_project(project_id: ID!): [ErrorComment]!
    admins(project_id: ID!): [Admin]!
    isIntegrated(project_id: ID!): Boolean
    unprocessedSessionsCount(project_id: ID!): Int64
    adminHasCreatedComment(admin_id: ID!): Boolean
    projectHasViewedASession(project_id: ID!): Session
    dailySessionsCount(
        project_id: ID!
        date_range: DateRangeInput!
    ): [DailySessionCount]!
    dailyErrorsCount(
        project_id: ID!
        date_range: DateRangeInput!
    ): [DailyErrorCount]!
    dailyErrorFrequency(
        project_id: ID!
        error_group_id: ID
        error_group_secure_id: String
        date_offset: Int!
    ): [Int64]!
    referrers(project_id: ID!, lookBackPeriod: Int!): [ReferrerTablePayload]!
    newUsersCount(project_id: ID!, lookBackPeriod: Int!): NewUsersCount
    topUsers(project_id: ID!, lookBackPeriod: Int!): [TopUsersPayload]!
    averageSessionLength(
        project_id: ID!
        lookBackPeriod: Int!
    ): AverageSessionLength
    userFingerprintCount(
        project_id: ID!
        lookBackPeriod: Int!
    ): UserFingerprintCount
    sessions(
        project_id: ID!
        count: Int!
        lifecycle: SessionLifecycle!
        starred: Boolean!
        params: SearchParamsInput
    ): SessionResults!
    billingDetails(project_id: ID!): BillingDetails!
    # gets all the projects of a user
    field_suggestion(project_id: ID!, name: String!, query: String!): [Field]
    property_suggestion(project_id: ID!, query: String!, type: String!): [Field]
    error_field_suggestion(
        project_id: ID!
        name: String!
        query: String!
    ): [ErrorField]
    projects: [Project]
    error_alert(project_id: ID!): ErrorAlert
    session_feedback_alert(project_id: ID!): SessionAlert
    new_user_alert(project_id: ID!): SessionAlert
    track_properties_alert(project_id: ID!): SessionAlert
    user_properties_alert(project_id: ID!): SessionAlert
    projectSuggestion(query: String!): [Project]
    environment_suggestion(query: String!, project_id: ID!): [Field]
    slack_channel_suggestion(project_id: ID!): [SanitizedSlackChannel]
    slack_members(project_id: ID!): [SanitizedSlackChannel]!
    is_integrated_with_slack(project_id: ID!): Boolean!
    project(id: ID!): Project
    admin: Admin
    segments(project_id: ID!): [Segment]
    error_segments(project_id: ID!): [ErrorSegment]
    api_key_to_org_id(api_key: String!): ID
}

type Mutation {
    createProject(name: String!): Project
    editProject(id: ID!, name: String, billing_email: String): Project
    markSessionAsViewed(id: ID, secure_id: String, viewed: Boolean): Session
    markSessionAsStarred(id: ID, secure_id: String, starred: Boolean): Session
    updateErrorGroupState(id: ID, secure_id: String, state: String!): ErrorGroup
    deleteProject(id: ID!): Boolean
    sendAdminInvite(project_id: ID!, email: String!, base_url: String!): String
    addAdminToProject(project_id: ID!, invite_id: String!): ID
    deleteAdminFromProject(project_id: ID!, admin_id: ID!): ID
    createSegment(
        project_id: ID!
        name: String!
        params: SearchParamsInput!
    ): Segment
    emailSignup(email: String!): String!
    editSegment(id: ID!, project_id: ID!, params: SearchParamsInput!): Boolean
    deleteSegment(segment_id: ID!): Boolean
    createErrorSegment(
        project_id: ID!
        name: String!
        params: ErrorSearchParamsInput!
    ): ErrorSegment
    editErrorSegment(
        id: ID!
        project_id: ID!
        params: ErrorSearchParamsInput!
    ): Boolean
    deleteErrorSegment(segment_id: ID!): Boolean
    # If this endpoint returns a checkout_id, we initiate a stripe checkout.
    # Otherwise, we simply update the subscription.
    createOrUpdateStripeSubscription(
        project_id: ID!
        plan_type: PlanType!
    ): String
    updateBillingDetails(project_id: ID!): Boolean
    createSessionComment(
        project_id: ID!
        session_id: ID
        session_secure_id: String
        session_timestamp: Int!
        text: String!
        text_for_email: String!
        x_coordinate: Float!
        y_coordinate: Float!
        tagged_admins: [SanitizedAdminInput]!
        tagged_slack_users: [SanitizedSlackChannelInput]!
        session_url: String!
        time: Float!
        author_name: String!
        session_image: String
    ): SessionComment
    deleteSessionComment(id: ID!): Boolean
    createErrorComment(
        project_id: ID!
        error_group_id: ID
        error_group_secure_id: String
        text: String!
        text_for_email: String!
        tagged_admins: [SanitizedAdminInput]!
        tagged_slack_users: [SanitizedSlackChannelInput]!
        error_url: String!
        author_name: String!
    ): ErrorComment
    deleteErrorComment(id: ID!): Boolean
    openSlackConversation(
        project_id: ID!
        code: String!
        redirect_path: String!
    ): Boolean
    addSlackBotIntegrationToProject(
        project_id: ID!
        code: String!
        redirect_path: String!
    ): Boolean!
    updateErrorAlert(
        project_id: ID!
        error_alert_id: ID!
        count_threshold: Int!
        threshold_window: Int!
        slack_channels: [SanitizedSlackChannelInput]!
        environments: [String]!
    ): ErrorAlert
    updateSessionFeedbackAlert(
        project_id: ID!
        session_feedback_alert_id: ID!
        count_threshold: Int!
        threshold_window: Int!
        slack_channels: [SanitizedSlackChannelInput]!
        environments: [String]!
    ): SessionAlert
    updateNewUserAlert(
        project_id: ID!
        session_alert_id: ID!
        count_threshold: Int!
        slack_channels: [SanitizedSlackChannelInput]!
        environments: [String]!
    ): SessionAlert
    updateTrackPropertiesAlert(
        project_id: ID!
        session_alert_id: ID!
        slack_channels: [SanitizedSlackChannelInput]!
        environments: [String]!
        track_properties: [TrackPropertyInput]!
    ): SessionAlert
    updateUserPropertiesAlert(
        project_id: ID!
        session_alert_id: ID!
        slack_channels: [SanitizedSlackChannelInput]!
        environments: [String]!
        user_properties: [UserPropertyInput]!
    ): SessionAlert
    updateSessionIsPublic(
        session_id: ID
        session_secure_id: String
        is_public: Boolean!
    ): Session
}
