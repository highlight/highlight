// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Account struct {
	ID                   int        `json:"id"`
	Name                 string     `json:"name"`
	SessionCountCur      int        `json:"session_count_cur"`
	ViewCountCur         int        `json:"view_count_cur"`
	SessionCountPrev     int        `json:"session_count_prev"`
	ViewCountPrev        int        `json:"view_count_prev"`
	SessionCountPrevPrev int        `json:"session_count_prev_prev"`
	SessionLimit         int        `json:"session_limit"`
	PaidPrev             int        `json:"paid_prev"`
	PaidPrevPrev         int        `json:"paid_prev_prev"`
	Email                string     `json:"email"`
	SubscriptionStart    *time.Time `json:"subscription_start"`
	PlanTier             string     `json:"plan_tier"`
	UnlimitedMembers     bool       `json:"unlimited_members"`
	StripeCustomerID     string     `json:"stripe_customer_id"`
	MemberCount          int        `json:"member_count"`
	MemberLimit          *int       `json:"member_limit"`
}

type AccountDetails struct {
	ID                   int                     `json:"id"`
	Name                 string                  `json:"name"`
	SessionCountPerMonth []*NamedCount           `json:"session_count_per_month"`
	SessionCountPerDay   []*NamedCount           `json:"session_count_per_day"`
	StripeCustomerID     string                  `json:"stripe_customer_id"`
	Members              []*AccountDetailsMember `json:"members"`
}

type AccountDetailsMember struct {
	ID         int        `json:"id"`
	Name       string     `json:"name"`
	Email      string     `json:"email"`
	LastActive *time.Time `json:"last_active"`
}

type AdminAboutYouDetails struct {
	FirstName          string  `json:"first_name"`
	LastName           string  `json:"last_name"`
	UserDefinedRole    string  `json:"user_defined_role"`
	UserDefinedPersona string  `json:"user_defined_persona"`
	Referral           string  `json:"referral"`
	Phone              *string `json:"phone"`
}

type AdminAndWorkspaceDetails struct {
	FirstName                   string  `json:"first_name"`
	LastName                    string  `json:"last_name"`
	UserDefinedRole             string  `json:"user_defined_role"`
	Referral                    string  `json:"referral"`
	WorkspaceName               string  `json:"workspace_name"`
	AllowedAutoJoinEmailOrigins *string `json:"allowed_auto_join_email_origins"`
	PromoCode                   *string `json:"promo_code"`
}

type AverageSessionLength struct {
	Length float64 `json:"length"`
}

type BillingDetails struct {
	Plan               *Plan `json:"plan"`
	Meter              int64 `json:"meter"`
	MembersMeter       int64 `json:"membersMeter"`
	SessionsOutOfQuota int64 `json:"sessionsOutOfQuota"`
	ErrorsMeter        int64 `json:"errorsMeter"`
	LogsMeter          int64 `json:"logsMeter"`
}

type CategoryHistogramBucket struct {
	Category string `json:"category"`
	Count    int    `json:"count"`
}

type CategoryHistogramPayload struct {
	Buckets []*CategoryHistogramBucket `json:"buckets"`
}

type ClickUpFolder struct {
	ID    string         `json:"id"`
	Name  string         `json:"name"`
	Lists []*ClickUpList `json:"lists"`
}

type ClickUpList struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ClickUpProjectMapping struct {
	ProjectID      int    `json:"project_id"`
	ClickupSpaceID string `json:"clickup_space_id"`
}

type ClickUpProjectMappingInput struct {
	ProjectID      int    `json:"project_id"`
	ClickupSpaceID string `json:"clickup_space_id"`
}

type ClickUpSpace struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ClickUpTask struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ClickUpTeam struct {
	ID     string          `json:"id"`
	Name   string          `json:"name"`
	Spaces []*ClickUpSpace `json:"spaces"`
}

type DashboardDefinition struct {
	ID                int                      `json:"id"`
	UpdatedAt         time.Time                `json:"updated_at"`
	ProjectID         int                      `json:"project_id"`
	Name              string                   `json:"name"`
	Metrics           []*DashboardMetricConfig `json:"metrics"`
	LastAdminToEditID *int                     `json:"last_admin_to_edit_id"`
	Layout            *string                  `json:"layout"`
	IsDefault         *bool                    `json:"is_default"`
}

type DashboardMetricConfig struct {
	Name                     string                   `json:"name"`
	Description              string                   `json:"description"`
	ComponentType            *MetricViewComponentType `json:"component_type"`
	MaxGoodValue             *float64                 `json:"max_good_value"`
	MaxNeedsImprovementValue *float64                 `json:"max_needs_improvement_value"`
	PoorValue                *float64                 `json:"poor_value"`
	Units                    *string                  `json:"units"`
	HelpArticle              *string                  `json:"help_article"`
	ChartType                *DashboardChartType      `json:"chart_type"`
	Aggregator               *MetricAggregator        `json:"aggregator"`
	MinValue                 *float64                 `json:"min_value"`
	MinPercentile            *float64                 `json:"min_percentile"`
	MaxValue                 *float64                 `json:"max_value"`
	MaxPercentile            *float64                 `json:"max_percentile"`
	Filters                  []*MetricTagFilter       `json:"filters"`
	Groups                   []string                 `json:"groups"`
}

type DashboardMetricConfigInput struct {
	Name                     string                   `json:"name"`
	Description              string                   `json:"description"`
	ComponentType            *MetricViewComponentType `json:"component_type"`
	MaxGoodValue             *float64                 `json:"max_good_value"`
	MaxNeedsImprovementValue *float64                 `json:"max_needs_improvement_value"`
	PoorValue                *float64                 `json:"poor_value"`
	Units                    *string                  `json:"units"`
	HelpArticle              *string                  `json:"help_article"`
	ChartType                *DashboardChartType      `json:"chart_type"`
	Aggregator               *MetricAggregator        `json:"aggregator"`
	MinValue                 *float64                 `json:"min_value"`
	MinPercentile            *float64                 `json:"min_percentile"`
	MaxValue                 *float64                 `json:"max_value"`
	MaxPercentile            *float64                 `json:"max_percentile"`
	Filters                  []*MetricTagFilterInput  `json:"filters"`
	Groups                   []string                 `json:"groups"`
}

type DashboardParamsInput struct {
	DateRange         *DateRangeInput         `json:"date_range"`
	ResolutionMinutes *int                    `json:"resolution_minutes"`
	Timezone          *string                 `json:"timezone"`
	Units             *string                 `json:"units"`
	Aggregator        *MetricAggregator       `json:"aggregator"`
	Filters           []*MetricTagFilterInput `json:"filters"`
	Groups            []string                `json:"groups"`
}

type DashboardPayload struct {
	Date       string            `json:"date"`
	Value      float64           `json:"value"`
	Aggregator *MetricAggregator `json:"aggregator"`
	Group      *string           `json:"group"`
}

type DateHistogramBucketSize struct {
	CalendarInterval OpenSearchCalendarInterval `json:"calendar_interval"`
	Multiple         int                        `json:"multiple"`
}

type DateHistogramOptions struct {
	BucketSize *DateHistogramBucketSize `json:"bucket_size"`
	TimeZone   string                   `json:"time_zone"`
	Bounds     *DateRangeInput          `json:"bounds"`
}

type DateRangeInput struct {
	StartDate *time.Time `json:"start_date"`
	EndDate   *time.Time `json:"end_date"`
}

type DateRangeRequiredInput struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

type DiscordChannelInput struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

type EnhancedUserDetailsResult struct {
	ID      *int          `json:"id"`
	Name    *string       `json:"name"`
	Avatar  *string       `json:"avatar"`
	Bio     *string       `json:"bio"`
	Socials []*SocialLink `json:"socials"`
	Email   *string       `json:"email"`
}

type ErrorDistributionItem struct {
	ErrorGroupID int       `json:"error_group_id"`
	Date         time.Time `json:"date"`
	Name         string    `json:"name"`
	Value        int64     `json:"value"`
}

type ErrorGroupFrequenciesParamsInput struct {
	DateRange         *DateRangeRequiredInput `json:"date_range"`
	ResolutionMinutes int                     `json:"resolution_minutes"`
}

type ErrorGroupTagAggregation struct {
	Key     string                            `json:"key"`
	Buckets []*ErrorGroupTagAggregationBucket `json:"buckets"`
}

type ErrorGroupTagAggregationBucket struct {
	Key      string  `json:"key"`
	DocCount int64   `json:"doc_count"`
	Percent  float64 `json:"percent"`
}

type ErrorMetadata struct {
	ErrorID         int        `json:"error_id"`
	SessionID       int        `json:"session_id"`
	SessionSecureID string     `json:"session_secure_id"`
	Environment     *string    `json:"environment"`
	Timestamp       *time.Time `json:"timestamp"`
	Os              *string    `json:"os"`
	Browser         *string    `json:"browser"`
	VisitedURL      *string    `json:"visited_url"`
	Fingerprint     string     `json:"fingerprint"`
	Identifier      *string    `json:"identifier"`
	UserProperties  *string    `json:"user_properties"`
	RequestID       *string    `json:"request_id"`
	Payload         *string    `json:"payload"`
}

type ErrorSearchParamsInput struct {
	DateRange  *DateRangeInput `json:"date_range"`
	Os         *string         `json:"os"`
	Browser    *string         `json:"browser"`
	VisitedURL *string         `json:"visited_url"`
	State      *ErrorState     `json:"state"`
	Event      *string         `json:"event"`
	Type       *string         `json:"type"`
	Query      *string         `json:"query"`
}

type ErrorTrace struct {
	FileName                   *string             `json:"fileName"`
	LineNumber                 *int                `json:"lineNumber"`
	FunctionName               *string             `json:"functionName"`
	ColumnNumber               *int                `json:"columnNumber"`
	Error                      *string             `json:"error"`
	SourceMappingErrorMetadata *SourceMappingError `json:"sourceMappingErrorMetadata"`
	LineContent                *string             `json:"lineContent"`
	LinesBefore                *string             `json:"linesBefore"`
	LinesAfter                 *string             `json:"linesAfter"`
}

type HeightList struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type HeightTask struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type HeightWorkspace struct {
	ID    string `json:"id"`
	Model string `json:"model"`
	Name  string `json:"name"`
	URL   string `json:"url"`
}

type HistogramBucket struct {
	Bucket     float64 `json:"bucket"`
	RangeStart float64 `json:"range_start"`
	RangeEnd   float64 `json:"range_end"`
	Count      int     `json:"count"`
}

type HistogramParamsInput struct {
	DateRange     *DateRangeInput         `json:"date_range"`
	Buckets       *int                    `json:"buckets"`
	MinValue      *float64                `json:"min_value"`
	MinPercentile *float64                `json:"min_percentile"`
	MaxValue      *float64                `json:"max_value"`
	MaxPercentile *float64                `json:"max_percentile"`
	Units         *string                 `json:"units"`
	Filters       []*MetricTagFilterInput `json:"filters"`
}

type HistogramPayload struct {
	Buckets []*HistogramBucket `json:"buckets"`
	Min     float64            `json:"min"`
	Max     float64            `json:"max"`
}

type IntegrationProjectMappingInput struct {
	ProjectID  int    `json:"project_id"`
	ExternalID string `json:"external_id"`
}

type IntegrationStatus struct {
	Integrated       bool       `json:"integrated"`
	ResourceType     string     `json:"resourceType"`
	ResourceSecureID *string    `json:"resourceSecureId"`
	CreatedAt        *time.Time `json:"createdAt"`
}

type Invoice struct {
	AmountDue    *int64     `json:"amountDue"`
	AmountPaid   *int64     `json:"amountPaid"`
	AttemptCount *int64     `json:"attemptCount"`
	Date         *time.Time `json:"date"`
	URL          *string    `json:"url"`
	Status       *string    `json:"status"`
}

type LengthRangeInput struct {
	Min *float64 `json:"min"`
	Max *float64 `json:"max"`
}

type LinearTeam struct {
	TeamID string `json:"team_id"`
	Name   string `json:"name"`
	Key    string `json:"key"`
}

type Log struct {
	Timestamp       time.Time              `json:"timestamp"`
	Level           LogLevel               `json:"level"`
	Message         string                 `json:"message"`
	LogAttributes   map[string]interface{} `json:"logAttributes"`
	TraceID         *string                `json:"traceID"`
	SpanID          *string                `json:"spanID"`
	SecureSessionID *string                `json:"secureSessionID"`
	Source          *string                `json:"source"`
	ServiceName     *string                `json:"serviceName"`
}

type LogAlertInput struct {
	ProjectID           int                           `json:"project_id"`
	Name                string                        `json:"name"`
	CountThreshold      int                           `json:"count_threshold"`
	BelowThreshold      bool                          `json:"below_threshold"`
	ThresholdWindow     int                           `json:"threshold_window"`
	SlackChannels       []*SanitizedSlackChannelInput `json:"slack_channels"`
	DiscordChannels     []*DiscordChannelInput        `json:"discord_channels"`
	WebhookDestinations []*WebhookDestinationInput    `json:"webhook_destinations"`
	Emails              []string                      `json:"emails"`
	Environments        []string                      `json:"environments"`
	Disabled            bool                          `json:"disabled"`
	Query               string                        `json:"query"`
}

type LogEdge struct {
	Cursor string `json:"cursor"`
	Node   *Log   `json:"node"`
}

type LogKey struct {
	Name string     `json:"name"`
	Type LogKeyType `json:"type"`
}

type LogsConnection struct {
	Edges    []*LogEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type LogsHistogram struct {
	Buckets    []*LogsHistogramBucket `json:"buckets"`
	TotalCount uint64                 `json:"totalCount"`
}

type LogsHistogramBucket struct {
	BucketID uint64                      `json:"bucketId"`
	Counts   []*LogsHistogramBucketCount `json:"counts"`
}

type LogsHistogramBucketCount struct {
	Count uint64   `json:"count"`
	Level LogLevel `json:"level"`
}

type LogsParamsInput struct {
	Query     string                  `json:"query"`
	DateRange *DateRangeRequiredInput `json:"date_range"`
}

type MetricPreview struct {
	Date  time.Time `json:"date"`
	Value float64   `json:"value"`
}

type MetricTagFilter struct {
	Tag   string            `json:"tag"`
	Op    MetricTagFilterOp `json:"op"`
	Value string            `json:"value"`
}

type MetricTagFilterInput struct {
	Tag   string            `json:"tag"`
	Op    MetricTagFilterOp `json:"op"`
	Value string            `json:"value"`
}

type NamedCount struct {
	Name  string `json:"name"`
	Count int    `json:"count"`
}

type NetworkHistogramParamsInput struct {
	LookbackDays *int                     `json:"lookback_days"`
	Attribute    *NetworkRequestAttribute `json:"attribute"`
}

type NewUsersCount struct {
	Count int64 `json:"count"`
}

type OAuthClient struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	AppName   string    `json:"app_name"`
}

type PageInfo struct {
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type Plan struct {
	Type         PlanType             `json:"type"`
	Interval     SubscriptionInterval `json:"interval"`
	Quota        int                  `json:"quota"`
	MembersLimit *int                 `json:"membersLimit"`
	ErrorsLimit  int                  `json:"errorsLimit"`
	LogsLimit    int                  `json:"logsLimit"`
}

type RageClickEventForProject struct {
	Identifier      string `json:"identifier"`
	SessionSecureID string `json:"session_secure_id"`
	TotalClicks     int    `json:"total_clicks"`
	UserProperties  string `json:"user_properties"`
}

type ReferrerTablePayload struct {
	Host    string  `json:"host"`
	Count   int     `json:"count"`
	Percent float64 `json:"percent"`
}

type S3File struct {
	Key *string `json:"key"`
}

type SanitizedAdmin struct {
	ID       int     `json:"id"`
	Name     *string `json:"name"`
	Email    string  `json:"email"`
	PhotoURL *string `json:"photo_url"`
}

type SanitizedAdminInput struct {
	ID    int     `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

type SanitizedSlackChannel struct {
	WebhookChannel   *string `json:"webhook_channel"`
	WebhookChannelID *string `json:"webhook_channel_id"`
}

type SanitizedSlackChannelInput struct {
	WebhookChannelName *string `json:"webhook_channel_name"`
	WebhookChannelID   *string `json:"webhook_channel_id"`
}

type SearchParamsInput struct {
	UserProperties          []*UserPropertyInput `json:"user_properties"`
	ExcludedProperties      []*UserPropertyInput `json:"excluded_properties"`
	TrackProperties         []*UserPropertyInput `json:"track_properties"`
	ExcludedTrackProperties []*UserPropertyInput `json:"excluded_track_properties"`
	Environments            []*string            `json:"environments"`
	AppVersions             []*string            `json:"app_versions"`
	DateRange               *DateRangeInput      `json:"date_range"`
	LengthRange             *LengthRangeInput    `json:"length_range"`
	Os                      *string              `json:"os"`
	Browser                 *string              `json:"browser"`
	DeviceID                *string              `json:"device_id"`
	VisitedURL              *string              `json:"visited_url"`
	Referrer                *string              `json:"referrer"`
	Identified              *bool                `json:"identified"`
	HideViewed              *bool                `json:"hide_viewed"`
	FirstTime               *bool                `json:"first_time"`
	ShowLiveSessions        *bool                `json:"show_live_sessions"`
	Query                   *string              `json:"query"`
}

type SessionAlertInput struct {
	ProjectID           int                           `json:"project_id"`
	Name                string                        `json:"name"`
	CountThreshold      int                           `json:"count_threshold"`
	ThresholdWindow     int                           `json:"threshold_window"`
	SlackChannels       []*SanitizedSlackChannelInput `json:"slack_channels"`
	DiscordChannels     []*DiscordChannelInput        `json:"discord_channels"`
	WebhookDestinations []*WebhookDestinationInput    `json:"webhook_destinations"`
	Emails              []string                      `json:"emails"`
	Environments        []string                      `json:"environments"`
	Disabled            bool                          `json:"disabled"`
	Type                SessionAlertType              `json:"type"`
	UserProperties      []*UserPropertyInput          `json:"user_properties"`
	ExcludeRules        []string                      `json:"exclude_rules"`
	TrackProperties     []*TrackPropertyInput         `json:"track_properties"`
}

type SessionCommentTagInput struct {
	ID   *int   `json:"id"`
	Name string `json:"name"`
}

type SlackSyncResponse struct {
	Success               bool `json:"success"`
	NewChannelsAddedCount int  `json:"newChannelsAddedCount"`
}

type SocialLink struct {
	Type SocialType `json:"type"`
	Link *string    `json:"link"`
}

type SourceMappingError struct {
	ErrorCode                  *SourceMappingErrorCode `json:"errorCode"`
	StackTraceFileURL          *string                 `json:"stackTraceFileURL"`
	SourcemapFetchStrategy     *string                 `json:"sourcemapFetchStrategy"`
	SourceMapURL               *string                 `json:"sourceMapURL"`
	MinifiedFetchStrategy      *string                 `json:"minifiedFetchStrategy"`
	ActualMinifiedFetchedPath  *string                 `json:"actualMinifiedFetchedPath"`
	MinifiedLineNumber         *int                    `json:"minifiedLineNumber"`
	MinifiedColumnNumber       *int                    `json:"minifiedColumnNumber"`
	ActualSourcemapFetchedPath *string                 `json:"actualSourcemapFetchedPath"`
	SourcemapFileSize          *int                    `json:"sourcemapFileSize"`
	MinifiedFileSize           *int                    `json:"minifiedFileSize"`
	MappedLineNumber           *int                    `json:"mappedLineNumber"`
	MappedColumnNumber         *int                    `json:"mappedColumnNumber"`
}

type SubscriptionDetails struct {
	BaseAmount      int64    `json:"baseAmount"`
	DiscountPercent float64  `json:"discountPercent"`
	DiscountAmount  int64    `json:"discountAmount"`
	LastInvoice     *Invoice `json:"lastInvoice"`
}

type TopUsersPayload struct {
	ID                   int     `json:"id"`
	Identifier           string  `json:"identifier"`
	TotalActiveTime      int     `json:"total_active_time"`
	ActiveTimePercentage float64 `json:"active_time_percentage"`
	UserProperties       string  `json:"user_properties"`
}

type TrackPropertyInput struct {
	ID    *int   `json:"id"`
	Name  string `json:"name"`
	Value string `json:"value"`
}

type User struct {
	ID int `json:"id"`
}

type UserFingerprintCount struct {
	Count int64 `json:"count"`
}

type UserPropertyInput struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Value string `json:"value"`
}

type VercelEnv struct {
	ID              string `json:"id"`
	Key             string `json:"key"`
	ConfigurationID string `json:"configurationId"`
}

type VercelProject struct {
	ID   string       `json:"id"`
	Name string       `json:"name"`
	Env  []*VercelEnv `json:"env"`
}

type VercelProjectMapping struct {
	VercelProjectID string `json:"vercel_project_id"`
	ProjectID       int    `json:"project_id"`
}

type VercelProjectMappingInput struct {
	VercelProjectID string  `json:"vercel_project_id"`
	NewProjectName  *string `json:"new_project_name"`
	ProjectID       *int    `json:"project_id"`
}

type WebhookDestinationInput struct {
	URL           string  `json:"url"`
	Authorization *string `json:"authorization"`
}

type WorkspaceForInviteLink struct {
	ExpirationDate  *time.Time `json:"expiration_date"`
	InviteeEmail    *string    `json:"invitee_email"`
	Secret          string     `json:"secret"`
	WorkspaceID     int        `json:"workspace_id"`
	WorkspaceName   string     `json:"workspace_name"`
	ExistingAccount bool       `json:"existing_account"`
}

type DashboardChartType string

const (
	DashboardChartTypeTimeline    DashboardChartType = "Timeline"
	DashboardChartTypeTimelineBar DashboardChartType = "TimelineBar"
	DashboardChartTypeHistogram   DashboardChartType = "Histogram"
)

var AllDashboardChartType = []DashboardChartType{
	DashboardChartTypeTimeline,
	DashboardChartTypeTimelineBar,
	DashboardChartTypeHistogram,
}

func (e DashboardChartType) IsValid() bool {
	switch e {
	case DashboardChartTypeTimeline, DashboardChartTypeTimelineBar, DashboardChartTypeHistogram:
		return true
	}
	return false
}

func (e DashboardChartType) String() string {
	return string(e)
}

func (e *DashboardChartType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DashboardChartType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DashboardChartType", str)
	}
	return nil
}

func (e DashboardChartType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailOptOutCategory string

const (
	EmailOptOutCategoryAll     EmailOptOutCategory = "All"
	EmailOptOutCategoryDigests EmailOptOutCategory = "Digests"
	EmailOptOutCategoryBilling EmailOptOutCategory = "Billing"
)

var AllEmailOptOutCategory = []EmailOptOutCategory{
	EmailOptOutCategoryAll,
	EmailOptOutCategoryDigests,
	EmailOptOutCategoryBilling,
}

func (e EmailOptOutCategory) IsValid() bool {
	switch e {
	case EmailOptOutCategoryAll, EmailOptOutCategoryDigests, EmailOptOutCategoryBilling:
		return true
	}
	return false
}

func (e EmailOptOutCategory) String() string {
	return string(e)
}

func (e *EmailOptOutCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailOptOutCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailOptOutCategory", str)
	}
	return nil
}

func (e EmailOptOutCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ErrorState string

const (
	ErrorStateOpen     ErrorState = "OPEN"
	ErrorStateResolved ErrorState = "RESOLVED"
	ErrorStateIgnored  ErrorState = "IGNORED"
)

var AllErrorState = []ErrorState{
	ErrorStateOpen,
	ErrorStateResolved,
	ErrorStateIgnored,
}

func (e ErrorState) IsValid() bool {
	switch e {
	case ErrorStateOpen, ErrorStateResolved, ErrorStateIgnored:
		return true
	}
	return false
}

func (e ErrorState) String() string {
	return string(e)
}

func (e *ErrorState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorState", str)
	}
	return nil
}

func (e ErrorState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IntegrationType string

const (
	IntegrationTypeSlack   IntegrationType = "Slack"
	IntegrationTypeLinear  IntegrationType = "Linear"
	IntegrationTypeZapier  IntegrationType = "Zapier"
	IntegrationTypeFront   IntegrationType = "Front"
	IntegrationTypeVercel  IntegrationType = "Vercel"
	IntegrationTypeDiscord IntegrationType = "Discord"
	IntegrationTypeClickUp IntegrationType = "ClickUp"
	IntegrationTypeHeight  IntegrationType = "Height"
)

var AllIntegrationType = []IntegrationType{
	IntegrationTypeSlack,
	IntegrationTypeLinear,
	IntegrationTypeZapier,
	IntegrationTypeFront,
	IntegrationTypeVercel,
	IntegrationTypeDiscord,
	IntegrationTypeClickUp,
	IntegrationTypeHeight,
}

func (e IntegrationType) IsValid() bool {
	switch e {
	case IntegrationTypeSlack, IntegrationTypeLinear, IntegrationTypeZapier, IntegrationTypeFront, IntegrationTypeVercel, IntegrationTypeDiscord, IntegrationTypeClickUp, IntegrationTypeHeight:
		return true
	}
	return false
}

func (e IntegrationType) String() string {
	return string(e)
}

func (e *IntegrationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntegrationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntegrationType", str)
	}
	return nil
}

func (e IntegrationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogDirection string

const (
	LogDirectionAsc  LogDirection = "ASC"
	LogDirectionDesc LogDirection = "DESC"
)

var AllLogDirection = []LogDirection{
	LogDirectionAsc,
	LogDirectionDesc,
}

func (e LogDirection) IsValid() bool {
	switch e {
	case LogDirectionAsc, LogDirectionDesc:
		return true
	}
	return false
}

func (e LogDirection) String() string {
	return string(e)
}

func (e *LogDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogDirection", str)
	}
	return nil
}

func (e LogDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogKeyType string

const (
	LogKeyTypeString LogKeyType = "String"
)

var AllLogKeyType = []LogKeyType{
	LogKeyTypeString,
}

func (e LogKeyType) IsValid() bool {
	switch e {
	case LogKeyTypeString:
		return true
	}
	return false
}

func (e LogKeyType) String() string {
	return string(e)
}

func (e *LogKeyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogKeyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogKeyType", str)
	}
	return nil
}

func (e LogKeyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogLevel string

const (
	LogLevelTrace LogLevel = "trace"
	LogLevelDebug LogLevel = "debug"
	LogLevelInfo  LogLevel = "info"
	LogLevelWarn  LogLevel = "warn"
	LogLevelError LogLevel = "error"
	LogLevelFatal LogLevel = "fatal"
)

var AllLogLevel = []LogLevel{
	LogLevelTrace,
	LogLevelDebug,
	LogLevelInfo,
	LogLevelWarn,
	LogLevelError,
	LogLevelFatal,
}

func (e LogLevel) IsValid() bool {
	switch e {
	case LogLevelTrace, LogLevelDebug, LogLevelInfo, LogLevelWarn, LogLevelError, LogLevelFatal:
		return true
	}
	return false
}

func (e LogLevel) String() string {
	return string(e)
}

func (e *LogLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogLevel", str)
	}
	return nil
}

func (e LogLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogSource string

const (
	LogSourceFrontend LogSource = "frontend"
	LogSourceBackend  LogSource = "backend"
)

var AllLogSource = []LogSource{
	LogSourceFrontend,
	LogSourceBackend,
}

func (e LogSource) IsValid() bool {
	switch e {
	case LogSourceFrontend, LogSourceBackend:
		return true
	}
	return false
}

func (e LogSource) String() string {
	return string(e)
}

func (e *LogSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogSource", str)
	}
	return nil
}

func (e LogSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MetricAggregator string

const (
	MetricAggregatorAvg   MetricAggregator = "Avg"
	MetricAggregatorP50   MetricAggregator = "P50"
	MetricAggregatorP75   MetricAggregator = "P75"
	MetricAggregatorP90   MetricAggregator = "P90"
	MetricAggregatorP95   MetricAggregator = "P95"
	MetricAggregatorP99   MetricAggregator = "P99"
	MetricAggregatorMax   MetricAggregator = "Max"
	MetricAggregatorCount MetricAggregator = "Count"
	MetricAggregatorSum   MetricAggregator = "Sum"
)

var AllMetricAggregator = []MetricAggregator{
	MetricAggregatorAvg,
	MetricAggregatorP50,
	MetricAggregatorP75,
	MetricAggregatorP90,
	MetricAggregatorP95,
	MetricAggregatorP99,
	MetricAggregatorMax,
	MetricAggregatorCount,
	MetricAggregatorSum,
}

func (e MetricAggregator) IsValid() bool {
	switch e {
	case MetricAggregatorAvg, MetricAggregatorP50, MetricAggregatorP75, MetricAggregatorP90, MetricAggregatorP95, MetricAggregatorP99, MetricAggregatorMax, MetricAggregatorCount, MetricAggregatorSum:
		return true
	}
	return false
}

func (e MetricAggregator) String() string {
	return string(e)
}

func (e *MetricAggregator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricAggregator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricAggregator", str)
	}
	return nil
}

func (e MetricAggregator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MetricTagFilterOp string

const (
	MetricTagFilterOpEquals   MetricTagFilterOp = "equals"
	MetricTagFilterOpContains MetricTagFilterOp = "contains"
)

var AllMetricTagFilterOp = []MetricTagFilterOp{
	MetricTagFilterOpEquals,
	MetricTagFilterOpContains,
}

func (e MetricTagFilterOp) IsValid() bool {
	switch e {
	case MetricTagFilterOpEquals, MetricTagFilterOpContains:
		return true
	}
	return false
}

func (e MetricTagFilterOp) String() string {
	return string(e)
}

func (e *MetricTagFilterOp) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricTagFilterOp(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricTagFilterOp", str)
	}
	return nil
}

func (e MetricTagFilterOp) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MetricViewComponentType string

const (
	MetricViewComponentTypeKeyPerformanceGauge MetricViewComponentType = "KeyPerformanceGauge"
	MetricViewComponentTypeSessionCountChart   MetricViewComponentType = "SessionCountChart"
	MetricViewComponentTypeErrorCountChart     MetricViewComponentType = "ErrorCountChart"
	MetricViewComponentTypeReferrersTable      MetricViewComponentType = "ReferrersTable"
	MetricViewComponentTypeActiveUsersTable    MetricViewComponentType = "ActiveUsersTable"
	MetricViewComponentTypeRageClicksTable     MetricViewComponentType = "RageClicksTable"
	MetricViewComponentTypeTopRoutesTable      MetricViewComponentType = "TopRoutesTable"
)

var AllMetricViewComponentType = []MetricViewComponentType{
	MetricViewComponentTypeKeyPerformanceGauge,
	MetricViewComponentTypeSessionCountChart,
	MetricViewComponentTypeErrorCountChart,
	MetricViewComponentTypeReferrersTable,
	MetricViewComponentTypeActiveUsersTable,
	MetricViewComponentTypeRageClicksTable,
	MetricViewComponentTypeTopRoutesTable,
}

func (e MetricViewComponentType) IsValid() bool {
	switch e {
	case MetricViewComponentTypeKeyPerformanceGauge, MetricViewComponentTypeSessionCountChart, MetricViewComponentTypeErrorCountChart, MetricViewComponentTypeReferrersTable, MetricViewComponentTypeActiveUsersTable, MetricViewComponentTypeRageClicksTable, MetricViewComponentTypeTopRoutesTable:
		return true
	}
	return false
}

func (e MetricViewComponentType) String() string {
	return string(e)
}

func (e *MetricViewComponentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricViewComponentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricViewComponentType", str)
	}
	return nil
}

func (e MetricViewComponentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkRequestAttribute string

const (
	NetworkRequestAttributeMethod           NetworkRequestAttribute = "method"
	NetworkRequestAttributeInitiatorType    NetworkRequestAttribute = "initiator_type"
	NetworkRequestAttributeURL              NetworkRequestAttribute = "url"
	NetworkRequestAttributeBodySize         NetworkRequestAttribute = "body_size"
	NetworkRequestAttributeResponseSize     NetworkRequestAttribute = "response_size"
	NetworkRequestAttributeStatus           NetworkRequestAttribute = "status"
	NetworkRequestAttributeLatency          NetworkRequestAttribute = "latency"
	NetworkRequestAttributeRequestID        NetworkRequestAttribute = "request_id"
	NetworkRequestAttributeGraphqlOperation NetworkRequestAttribute = "graphql_operation"
)

var AllNetworkRequestAttribute = []NetworkRequestAttribute{
	NetworkRequestAttributeMethod,
	NetworkRequestAttributeInitiatorType,
	NetworkRequestAttributeURL,
	NetworkRequestAttributeBodySize,
	NetworkRequestAttributeResponseSize,
	NetworkRequestAttributeStatus,
	NetworkRequestAttributeLatency,
	NetworkRequestAttributeRequestID,
	NetworkRequestAttributeGraphqlOperation,
}

func (e NetworkRequestAttribute) IsValid() bool {
	switch e {
	case NetworkRequestAttributeMethod, NetworkRequestAttributeInitiatorType, NetworkRequestAttributeURL, NetworkRequestAttributeBodySize, NetworkRequestAttributeResponseSize, NetworkRequestAttributeStatus, NetworkRequestAttributeLatency, NetworkRequestAttributeRequestID, NetworkRequestAttributeGraphqlOperation:
		return true
	}
	return false
}

func (e NetworkRequestAttribute) String() string {
	return string(e)
}

func (e *NetworkRequestAttribute) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkRequestAttribute(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkRequestAttribute", str)
	}
	return nil
}

func (e NetworkRequestAttribute) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OpenSearchCalendarInterval string

const (
	OpenSearchCalendarIntervalMinute  OpenSearchCalendarInterval = "minute"
	OpenSearchCalendarIntervalHour    OpenSearchCalendarInterval = "hour"
	OpenSearchCalendarIntervalDay     OpenSearchCalendarInterval = "day"
	OpenSearchCalendarIntervalWeek    OpenSearchCalendarInterval = "week"
	OpenSearchCalendarIntervalMonth   OpenSearchCalendarInterval = "month"
	OpenSearchCalendarIntervalQuarter OpenSearchCalendarInterval = "quarter"
	OpenSearchCalendarIntervalYear    OpenSearchCalendarInterval = "year"
)

var AllOpenSearchCalendarInterval = []OpenSearchCalendarInterval{
	OpenSearchCalendarIntervalMinute,
	OpenSearchCalendarIntervalHour,
	OpenSearchCalendarIntervalDay,
	OpenSearchCalendarIntervalWeek,
	OpenSearchCalendarIntervalMonth,
	OpenSearchCalendarIntervalQuarter,
	OpenSearchCalendarIntervalYear,
}

func (e OpenSearchCalendarInterval) IsValid() bool {
	switch e {
	case OpenSearchCalendarIntervalMinute, OpenSearchCalendarIntervalHour, OpenSearchCalendarIntervalDay, OpenSearchCalendarIntervalWeek, OpenSearchCalendarIntervalMonth, OpenSearchCalendarIntervalQuarter, OpenSearchCalendarIntervalYear:
		return true
	}
	return false
}

func (e OpenSearchCalendarInterval) String() string {
	return string(e)
}

func (e *OpenSearchCalendarInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OpenSearchCalendarInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OpenSearchCalendarInterval", str)
	}
	return nil
}

func (e OpenSearchCalendarInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlanType string

const (
	PlanTypeFree       PlanType = "Free"
	PlanTypeLite       PlanType = "Lite"
	PlanTypeBasic      PlanType = "Basic"
	PlanTypeStartup    PlanType = "Startup"
	PlanTypeEnterprise PlanType = "Enterprise"
)

var AllPlanType = []PlanType{
	PlanTypeFree,
	PlanTypeLite,
	PlanTypeBasic,
	PlanTypeStartup,
	PlanTypeEnterprise,
}

func (e PlanType) IsValid() bool {
	switch e {
	case PlanTypeFree, PlanTypeLite, PlanTypeBasic, PlanTypeStartup, PlanTypeEnterprise:
		return true
	}
	return false
}

func (e PlanType) String() string {
	return string(e)
}

func (e *PlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanType", str)
	}
	return nil
}

func (e PlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductType string

const (
	ProductTypeSessions ProductType = "Sessions"
	ProductTypeErrors   ProductType = "Errors"
	ProductTypeLogs     ProductType = "Logs"
)

var AllProductType = []ProductType{
	ProductTypeSessions,
	ProductTypeErrors,
	ProductTypeLogs,
}

func (e ProductType) IsValid() bool {
	switch e {
	case ProductTypeSessions, ProductTypeErrors, ProductTypeLogs:
		return true
	}
	return false
}

func (e ProductType) String() string {
	return string(e)
}

func (e *ProductType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductType", str)
	}
	return nil
}

func (e ProductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReservedLogKey string

const (
	// Keep this in alpha order
	ReservedLogKeyLevel           ReservedLogKey = "level"
	ReservedLogKeyMessage         ReservedLogKey = "message"
	ReservedLogKeySecureSessionID ReservedLogKey = "secure_session_id"
	ReservedLogKeySpanID          ReservedLogKey = "span_id"
	ReservedLogKeyTraceID         ReservedLogKey = "trace_id"
	ReservedLogKeySource          ReservedLogKey = "source"
	ReservedLogKeyServiceName     ReservedLogKey = "service_name"
)

var AllReservedLogKey = []ReservedLogKey{
	ReservedLogKeyLevel,
	ReservedLogKeyMessage,
	ReservedLogKeySecureSessionID,
	ReservedLogKeySpanID,
	ReservedLogKeyTraceID,
	ReservedLogKeySource,
	ReservedLogKeyServiceName,
}

func (e ReservedLogKey) IsValid() bool {
	switch e {
	case ReservedLogKeyLevel, ReservedLogKeyMessage, ReservedLogKeySecureSessionID, ReservedLogKeySpanID, ReservedLogKeyTraceID, ReservedLogKeySource, ReservedLogKeyServiceName:
		return true
	}
	return false
}

func (e ReservedLogKey) String() string {
	return string(e)
}

func (e *ReservedLogKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReservedLogKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReservedLogKey", str)
	}
	return nil
}

func (e ReservedLogKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RetentionPeriod string

const (
	RetentionPeriodThreeMonths  RetentionPeriod = "ThreeMonths"
	RetentionPeriodSixMonths    RetentionPeriod = "SixMonths"
	RetentionPeriodTwelveMonths RetentionPeriod = "TwelveMonths"
	RetentionPeriodTwoYears     RetentionPeriod = "TwoYears"
)

var AllRetentionPeriod = []RetentionPeriod{
	RetentionPeriodThreeMonths,
	RetentionPeriodSixMonths,
	RetentionPeriodTwelveMonths,
	RetentionPeriodTwoYears,
}

func (e RetentionPeriod) IsValid() bool {
	switch e {
	case RetentionPeriodThreeMonths, RetentionPeriodSixMonths, RetentionPeriodTwelveMonths, RetentionPeriodTwoYears:
		return true
	}
	return false
}

func (e RetentionPeriod) String() string {
	return string(e)
}

func (e *RetentionPeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RetentionPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RetentionPeriod", str)
	}
	return nil
}

func (e RetentionPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SessionAlertType string

const (
	SessionAlertTypeErrorAlert           SessionAlertType = "ERROR_ALERT"
	SessionAlertTypeNewUserAlert         SessionAlertType = "NEW_USER_ALERT"
	SessionAlertTypeTrackPropertiesAlert SessionAlertType = "TRACK_PROPERTIES_ALERT"
	SessionAlertTypeUserPropertiesAlert  SessionAlertType = "USER_PROPERTIES_ALERT"
	SessionAlertTypeSessionFeedbackAlert SessionAlertType = "SESSION_FEEDBACK_ALERT"
	SessionAlertTypeRageClickAlert       SessionAlertType = "RAGE_CLICK_ALERT"
	SessionAlertTypeNewSessionAlert      SessionAlertType = "NEW_SESSION_ALERT"
)

var AllSessionAlertType = []SessionAlertType{
	SessionAlertTypeErrorAlert,
	SessionAlertTypeNewUserAlert,
	SessionAlertTypeTrackPropertiesAlert,
	SessionAlertTypeUserPropertiesAlert,
	SessionAlertTypeSessionFeedbackAlert,
	SessionAlertTypeRageClickAlert,
	SessionAlertTypeNewSessionAlert,
}

func (e SessionAlertType) IsValid() bool {
	switch e {
	case SessionAlertTypeErrorAlert, SessionAlertTypeNewUserAlert, SessionAlertTypeTrackPropertiesAlert, SessionAlertTypeUserPropertiesAlert, SessionAlertTypeSessionFeedbackAlert, SessionAlertTypeRageClickAlert, SessionAlertTypeNewSessionAlert:
		return true
	}
	return false
}

func (e SessionAlertType) String() string {
	return string(e)
}

func (e *SessionAlertType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionAlertType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionAlertType", str)
	}
	return nil
}

func (e SessionAlertType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SessionCommentType string

const (
	SessionCommentTypeAdmin    SessionCommentType = "Admin"
	SessionCommentTypeFeedback SessionCommentType = "FEEDBACK"
)

var AllSessionCommentType = []SessionCommentType{
	SessionCommentTypeAdmin,
	SessionCommentTypeFeedback,
}

func (e SessionCommentType) IsValid() bool {
	switch e {
	case SessionCommentTypeAdmin, SessionCommentTypeFeedback:
		return true
	}
	return false
}

func (e SessionCommentType) String() string {
	return string(e)
}

func (e *SessionCommentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionCommentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionCommentType", str)
	}
	return nil
}

func (e SessionCommentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SessionLifecycle string

const (
	SessionLifecycleAll       SessionLifecycle = "All"
	SessionLifecycleLive      SessionLifecycle = "Live"
	SessionLifecycleCompleted SessionLifecycle = "Completed"
)

var AllSessionLifecycle = []SessionLifecycle{
	SessionLifecycleAll,
	SessionLifecycleLive,
	SessionLifecycleCompleted,
}

func (e SessionLifecycle) IsValid() bool {
	switch e {
	case SessionLifecycleAll, SessionLifecycleLive, SessionLifecycleCompleted:
		return true
	}
	return false
}

func (e SessionLifecycle) String() string {
	return string(e)
}

func (e *SessionLifecycle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionLifecycle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionLifecycle", str)
	}
	return nil
}

func (e SessionLifecycle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SocialType string

const (
	SocialTypeGithub   SocialType = "Github"
	SocialTypeLinkedIn SocialType = "LinkedIn"
	SocialTypeTwitter  SocialType = "Twitter"
	SocialTypeFacebook SocialType = "Facebook"
	SocialTypeSite     SocialType = "Site"
)

var AllSocialType = []SocialType{
	SocialTypeGithub,
	SocialTypeLinkedIn,
	SocialTypeTwitter,
	SocialTypeFacebook,
	SocialTypeSite,
}

func (e SocialType) IsValid() bool {
	switch e {
	case SocialTypeGithub, SocialTypeLinkedIn, SocialTypeTwitter, SocialTypeFacebook, SocialTypeSite:
		return true
	}
	return false
}

func (e SocialType) String() string {
	return string(e)
}

func (e *SocialType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SocialType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SocialType", str)
	}
	return nil
}

func (e SocialType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SourceMappingErrorCode string

const (
	SourceMappingErrorCodeFileNameMissingFromSourcePath         SourceMappingErrorCode = "File_Name_Missing_From_Source_Path"
	SourceMappingErrorCodeErrorParsingStackTraceFileURL         SourceMappingErrorCode = "Error_Parsing_Stack_Trace_File_Url"
	SourceMappingErrorCodeMissingSourceMapFileInS3              SourceMappingErrorCode = "Missing_Source_Map_File_In_S3"
	SourceMappingErrorCodeMinifiedFileMissingInS3AndURL         SourceMappingErrorCode = "Minified_File_Missing_In_S3_And_URL"
	SourceMappingErrorCodeSourcemapFileMissingInS3AndURL        SourceMappingErrorCode = "Sourcemap_File_Missing_In_S3_And_URL"
	SourceMappingErrorCodeMinifiedFileLarger                    SourceMappingErrorCode = "Minified_File_Larger"
	SourceMappingErrorCodeSourceMapFileLarger                   SourceMappingErrorCode = "Source_Map_File_Larger"
	SourceMappingErrorCodeInvalidSourceMapURL                   SourceMappingErrorCode = "Invalid_SourceMapURL"
	SourceMappingErrorCodeSourcemapLibraryCouldntParse          SourceMappingErrorCode = "Sourcemap_Library_Couldnt_Parse"
	SourceMappingErrorCodeSourcemapLibraryCouldntRetrieveSource SourceMappingErrorCode = "Sourcemap_Library_Couldnt_Retrieve_Source"
)

var AllSourceMappingErrorCode = []SourceMappingErrorCode{
	SourceMappingErrorCodeFileNameMissingFromSourcePath,
	SourceMappingErrorCodeErrorParsingStackTraceFileURL,
	SourceMappingErrorCodeMissingSourceMapFileInS3,
	SourceMappingErrorCodeMinifiedFileMissingInS3AndURL,
	SourceMappingErrorCodeSourcemapFileMissingInS3AndURL,
	SourceMappingErrorCodeMinifiedFileLarger,
	SourceMappingErrorCodeSourceMapFileLarger,
	SourceMappingErrorCodeInvalidSourceMapURL,
	SourceMappingErrorCodeSourcemapLibraryCouldntParse,
	SourceMappingErrorCodeSourcemapLibraryCouldntRetrieveSource,
}

func (e SourceMappingErrorCode) IsValid() bool {
	switch e {
	case SourceMappingErrorCodeFileNameMissingFromSourcePath, SourceMappingErrorCodeErrorParsingStackTraceFileURL, SourceMappingErrorCodeMissingSourceMapFileInS3, SourceMappingErrorCodeMinifiedFileMissingInS3AndURL, SourceMappingErrorCodeSourcemapFileMissingInS3AndURL, SourceMappingErrorCodeMinifiedFileLarger, SourceMappingErrorCodeSourceMapFileLarger, SourceMappingErrorCodeInvalidSourceMapURL, SourceMappingErrorCodeSourcemapLibraryCouldntParse, SourceMappingErrorCodeSourcemapLibraryCouldntRetrieveSource:
		return true
	}
	return false
}

func (e SourceMappingErrorCode) String() string {
	return string(e)
}

func (e *SourceMappingErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SourceMappingErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SourceMappingErrorCode", str)
	}
	return nil
}

func (e SourceMappingErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionInterval string

const (
	SubscriptionIntervalMonthly SubscriptionInterval = "Monthly"
	SubscriptionIntervalAnnual  SubscriptionInterval = "Annual"
)

var AllSubscriptionInterval = []SubscriptionInterval{
	SubscriptionIntervalMonthly,
	SubscriptionIntervalAnnual,
}

func (e SubscriptionInterval) IsValid() bool {
	switch e {
	case SubscriptionIntervalMonthly, SubscriptionIntervalAnnual:
		return true
	}
	return false
}

func (e SubscriptionInterval) String() string {
	return string(e)
}

func (e *SubscriptionInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionInterval", str)
	}
	return nil
}

func (e SubscriptionInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
