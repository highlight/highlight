# MAIN GRAPH

scalar Any
scalar Time

type Field {
    name: String!
    value: String!
    type: String
}

type Session {
    id: ID!
    user_id: ID!
    os_name: String!
    os_version: String!
    browser_name: String!
    browser_version: String!
    city: String!
    state: String!
    postal: String!
    identifier: String!
    created_at: Time
    length: Int
    user_object: Any
    fields: [Field]
    viewed: Boolean
}

type RecordingSettings {
    id: ID!
    organization_id: ID!
    details: String!
}

type Organization {
    id: ID!
    verbose_id: String!
    name: String!
    billing_email: String
    trial_end_date: Time
}

type Segment {
    id: ID!
    name: String!
    params: SearchParams!
    organization_id: ID!
}

type ErrorObject {
    id: ID!
    organization_id: Int!
    session_id: Int!
    event: String!
    type: String!
    url: String!
    source: String
    line_number: Int
    column_number: Int
    trace: [Any]
}

type ErrorGroup {
    id: ID!
    organization_id: Int!
    event: String!
    trace: String!
    metadata_log: String
}

# NOTE: for SearchParams, if you make a change and want it to be reflected in both Segments and the default search UI,
# edit both Foo and FooInput
input SearchParamsInput {
    user_properties: [UserPropertyInput]
    excluded_properties: [UserPropertyInput]
    track_properties: [UserPropertyInput]
    date_range: DateRangeInput
    os: String
    browser: String
    visited_url: String
    referrer: String
    identified: Boolean
    hide_viewed: Boolean
}

type SearchParams {
    user_properties: [UserProperty]
    excluded_properties: [UserProperty]
    track_properties: [UserProperty]
    date_range: DateRange
    os: String
    browser: String
    visited_url: String
    referrer: String
    identified: Boolean
    hide_viewed: Boolean
}

type DateRange {
    start_date: Time
    end_date: Time
}

input DateRangeInput {
    start_date: Time
    end_date: Time
}

type UserProperty {
    name: String!
    value: String!
}

input UserPropertyInput {
    name: String!
    value: String!
}

type User {
    id: ID!
}

type Admin {
    id: ID!
    name: String!
    email: String!
}

type SessionResults {
    sessions: [Session]!
    totalCount: Int!
}

type Query {
    session(id: ID!): Session
    events(session_id: ID!): [Any]
    error_groups(organization_id: ID!): [ErrorGroup]
    messages(session_id: ID!): [Any]
    resources(session_id: ID!): [Any]
    admins(organization_id: ID!): [Admin]
    isIntegrated(organization_id: ID!): Boolean
    sessionsBETA(
        organization_id: ID!
        count: Int!
        params: SearchParamsInput
    ): SessionResults
    billingDetails(organization_id: ID!): Plan!
    # gets all the organizations of a user
    field_suggestionBETA(
        organization_id: ID!
        name: String!
        query: String!
    ): [Field]
    property_suggestion(
        organization_id: ID!
        query: String!
        type: String!
    ): [Field]
    organizations: [Organization]
    organization(id: ID!): Organization
    admin: Admin
    segments(organization_id: ID!): [Segment]
    recording_settings(organization_id: ID!): RecordingSettings
}

enum Plan {
    None
    Basic
    Startup
    Enterprise
}

type Mutation {
    createOrganization(name: String!): Organization
    editOrganization(id: ID!, name: String, billing_email: String): Organization
    markSessionAsViewed(id: ID!): Session
    deleteOrganization(id: ID!): Boolean
    sendAdminInvite(organization_id: ID!, email: String!): String
    addAdminToOrganization(organization_id: ID!, invite_id: String!): ID
    createSegment(
        organization_id: ID!
        name: String!
        params: SearchParamsInput!
    ): Segment
    editSegment(
        id: ID!
        organization_id: ID!
        params: SearchParamsInput!
    ): Boolean
    deleteSegment(segment_id: ID!): Boolean
    editRecordingSettings(
        organization_id: ID!
        details: String
    ): RecordingSettings
    # If this endpoint returns a checkout_id, we initiate a stripe checkout.
    # Otherwise, we simply update the subscription.
    createOrUpdateSubscription(organization_id: ID!, plan: Plan!): String
}
