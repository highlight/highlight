receivers:
    fluentforward:
        endpoint: '0.0.0.0:24224'
    tcplog:
        listen_address: '0.0.0.0:34302'
    awsfirehose/cwmetrics:
        endpoint: '0.0.0.0:4433'
        record_type: cwmetrics
        include_metadata: true
    awsfirehose/cwlogs:
        endpoint: '0.0.0.0:4434'
        record_type: cwlogs
        include_metadata: true
    awsfirehose/otlp_v1:
        endpoint: '0.0.0.0:4435'
        record_type: otlp_v1
        include_metadata: true
    syslog:
        udp:
            listen_address: '0.0.0.0:6513'
        tcp:
            listen_address: '0.0.0.0:6514'
        protocol: 'rfc5424'
        enable_octet_counting: true
    otlp:
        protocols:
            grpc:
                endpoint: '0.0.0.0:4317'
                include_metadata: true
                max_recv_msg_size_mib: 1000
            http:
                endpoint: '0.0.0.0:4318'
                max_request_body_size: 0
                include_metadata: true
                cors:
                    allowed_origins:
                        # Can't use '*' with credentials because it fails CORS
                        # validation on the preflight request.
                        - 'https://*'
                        - 'http://*'
                    allowed_headers:
                        - 'X-Highlight-Request'
                        - 'Origin'
                        - 'Content-Type'
                        - 'Accept'
                        - 'Access-Control-Request-Headers'
                        - 'Access-Control-Request-Method'
                        - 'Access-Control-Allow-Origin'
                        - 'Access-Control-Allow-Methods'
                        - 'Access-Control-Max-Age'
                        - 'Referer'
                        - 'Traceparent'
                        - 'Tracestate'
                    max_age: 7200
    otlp/https:
        protocols:
            http:
                endpoint: '0.0.0.0:8318'
                max_request_body_size: 0
                include_metadata: true
                cors:
                    allowed_origins:
                        - 'https://*'
                    allowed_headers:
                        - 'X-Highlight-Request'
                        - 'Origin'
                        - 'Content-Type'
                        - 'Accept'
                        - 'Access-Control-Request-Headers'
                        - 'Access-Control-Request-Method'
                        - 'Access-Control-Allow-Origin'
                        - 'Access-Control-Allow-Methods'
                        - 'Access-Control-Max-Age'
                        - 'Referer'
                        - 'Traceparent'
                        - 'Tracestate'
                    max_age: 7200
                tls:
                    cert_file: '/server.crt'
                    key_file: '/server.key'
exporters:
    debug:
        sampling_initial: 60
        sampling_thereafter: 1000
    otlphttp:
        endpoint: 'https://host.docker.internal:8082/otel'
        compression: snappy
        tls:
            insecure_skip_verify: true
        timeout: 30s
        http2_read_idle_timeout: 30s
        http2_ping_timeout: 30s
        idle_conn_timeout: 60s
        max_idle_conns: 100
        max_idle_conns_per_host: 100
        max_conns_per_host: 1000
        read_buffer_size: 32768
        write_buffer_size: 131072
        sending_queue:
            num_consumers: 100
            queue_size: 10000
        retry_on_failure:
            enabled: true
            initial_interval: 1s
            max_interval: 30s
            max_elapsed_time: 300s
processors:
    memory_limiter:
        limit_mib: 14336
        spike_limit_mib: 1024
        check_interval: 0.1s
    batch:
        metadata_keys:
            - x-highlight-project
        metadata_cardinality_limit: 1000
        timeout: 1s
        send_batch_size: 1000
        send_batch_max_size: 10000
    attributes:
        actions:
            - key: highlight.project_id
              from_context: metadata.x-highlight-project
              action: insert
service:
    telemetry:
        logs:
            level: 'debug'
        metrics:
            address: '0.0.0.0:8888'
            level: detailed
    extensions: [health_check]
    pipelines:
        traces:
            receivers: [otlp, otlp/https]
            processors: [memory_limiter, batch, attributes]
            exporters: [otlphttp, debug]
        metrics:
            receivers:
                [otlp, otlp/https, awsfirehose/cwmetrics, awsfirehose/otlp_v1]
            processors: [memory_limiter, batch, attributes]
            exporters: [otlphttp, debug]
        logs:
            receivers:
                [
                    otlp,
                    otlp/https,
                    fluentforward,
                    tcplog,
                    syslog,
                    awsfirehose/cwlogs,
                ]
            processors: [memory_limiter, batch, attributes]
            exporters: [otlphttp, debug]
extensions:
    health_check:
        endpoint: '0.0.0.0:4319'
        path: '/health/status'
