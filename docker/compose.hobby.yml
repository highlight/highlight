x-logging: &local-logging
    driver: local

x-backend-env: &backend-env
    environment:
        - CLICKHOUSE_ADDRESS
        - CLICKHOUSE_DATABASE
        - CLICKHOUSE_PASSWORD
        - CLICKHOUSE_USERNAME
        - DEMO_PROJECT_ID
        - DOPPLER_CONFIG
        - ENABLE_OBJECT_STORAGE=true
        - ENVIRONMENT
        - FIREBASE_SECRET
        - IN_DOCKER=true
        - IN_DOCKER_GO=true
        - KAFKA_SERVERS
        - KAFKA_TOPIC
        - OBJECT_STORAGE_FS=/highlight-data
        - ON_PREM=true
        - OTLP_ENDPOINT
        - PSQL_DB
        - PSQL_HOST
        - PSQL_DOCKER_HOST
        - PSQL_PASSWORD
        - PSQL_PORT
        - PSQL_USER
        - REACT_APP_AUTH_MODE=simple
        - REACT_APP_COMMIT_SHA
        - REACT_APP_FRONTEND_URI
        - REACT_APP_PRIVATE_GRAPH_URI
        - REDIS_ADDRESS
        - REDIS_EVENTS_STAGING_ENDPOINT
        - SESSION_FILE_PATH_PREFIX
        - SSL
        - TZ
        - ADMIN_PASSWORD

# Highlight.io services for the hobby deployment.
services:
    zookeeper:
        extends:
            file: compose.yml
            service: zookeeper
        logging: *local-logging

    kafka:
        extends:
            file: compose.yml
            service: kafka
        logging: *local-logging
        environment:
            # needs to share docker-internal address
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092

    redis:
        extends:
            file: compose.yml
            service: redis
        logging: *local-logging

    postgres:
        extends:
            file: compose.yml
            service: postgres
        logging: *local-logging

    clickhouse:
        extends:
            file: compose.yml
            service: clickhouse
        logging: *local-logging

    collector:
        logging: *local-logging
        ports:
            - '0.0.0.0:4317:4317'
            - '0.0.0.0:4318:4318'
            - '0.0.0.0:4319:4319'
            - '0.0.0.0:8888:8888'
            - '0.0.0.0:24224:24224'
            - '0.0.0.0:34302:34302'
        container_name: collector
        image: otel/opentelemetry-collector-contrib
        command:
            - '--config=/etc/collector.yml'
        volumes:
            - ./collector.yml:/etc/collector.yml

    backend:
        container_name: backend
        image: ghcr.io/highlight/highlight-backend:latest
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8082/health']
            start_period: 60s
            interval: 5s
            timeout: 5s
            retries: 5
        depends_on:
            kafka:
                condition: service_started
            redis:
                condition: service_started
            postgres:
                condition: service_healthy
            clickhouse:
                condition: service_started
            collector:
                condition: service_started
        ports:
            - '0.0.0.0:8082:8082'
        volumes:
            - highlight-data:/highlight-data
        <<: *backend-env

    frontend:
        container_name: frontend
        image: ghcr.io/highlight/highlight-frontend:latest
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
            start_period: 5s
            interval: 5s
            timeout: 5s
            retries: 5
        ports:
            - '0.0.0.0:3000:3000'
            - '0.0.0.0:6006:6006'
            - '0.0.0.0:8080:8080'
        environment:
            - REACT_APP_PRIVATE_GRAPH_URI
            - REACT_APP_PUBLIC_GRAPH_URI
            - REACT_APP_FRONTEND_URI
            - SSL

volumes:
    highlight-data:
